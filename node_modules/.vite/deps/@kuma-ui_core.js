import {
  compile,
  serialize,
  stringify
} from "./chunk-Y2OJSRQ5.js";
import {
  __publicField,
  __toESM,
  require_react
} from "./chunk-AEGTEN6G.js";

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/styled.mjs
function _styled(Component) {
  const fn = (strings) => {
    throw Error('Using the "styled" tag in runtime is not supported.');
  };
  return fn;
}
var styled = new Proxy(_styled, {
  get(target, key) {
    return target(key);
  }
});

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/k.mjs
var k = new Proxy(
  {},
  {
    get() {
      throw new Error('Using the "k" in runtime is not supported.');
    }
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- FIXME
);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/css.mjs
var css = (_strings) => {
  throw Error('Using the "css" in runtime is not supported.');
};

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/utils/object.mjs
function flattenObject(object) {
  const result = {};
  for (const key in object) {
    if (!Object.hasOwn(object, key))
      continue;
    const value = object[key];
    if (typeof value == "object" && value !== null) {
      const _object = flattenObject(value);
      for (const _key in _object) {
        if (!Object.hasOwn(_object, _key))
          continue;
        result[key + "." + _key] = _object[_key];
      }
    } else {
      result[key] = value;
    }
  }
  return result;
}

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/theme.mjs
function createTheme(theme2) {
  const rawTheme = theme2;
  const resolvedTokens = {};
  for (const key in rawTheme) {
    if (key !== "components") {
      resolvedTokens[key] = flattenObject({ [key]: rawTheme[key] });
    }
  }
  return {
    ...resolvedTokens,
    components: rawTheme.components
  };
}

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Box/react/index.mjs
var import_react6 = __toESM(require_react(), 1);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Box/react/DynamicBox.mjs
var import_react4 = __toESM(require_react(), 1);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/utils/isBrowser.mjs
var isBrowser = typeof window !== "undefined";

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/registry/StyleRegistry.mjs
var import_react2 = __toESM(require_react(), 1);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/registry/StyleSheetRegistry.mjs
var import_react = __toESM(require_react(), 1);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/utils/isProduction.mjs
var isProduction = false;

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/registry/sheet/ClientStyleSheet.mjs
var ClientStyleSheet = class {
  constructor(name, speedy = false) {
    __publicField(this, "name");
    __publicField(this, "deletedRulePlaceholder");
    __publicField(this, "speedy");
    __publicField(this, "tags");
    __publicField(this, "injected");
    __publicField(this, "rulesCount");
    this.name = name;
    this.deletedRulePlaceholder = `#${name}-deleted-rule{}`;
    this.speedy = speedy;
    this.tags = [];
    this.injected = false;
    this.rulesCount = 0;
  }
  inject() {
    if (this.injected) {
      throw new Error("ClientStyleSheet: sheet already injected");
    }
    if (this.speedy) {
      this.tags[0] = this.makeStyleTag();
      this.speedy = "insertRule" in this.getLatestSheet();
      if (!this.speedy) {
        if (!isProduction) {
          console.warn(
            "ClientStyleSheet: speedy mode not supported falling back to standard mode."
          );
        }
        this.flush();
      }
    }
    this.injected = true;
  }
  isSpeedy() {
    return this.speedy;
  }
  setSpeedy(bool) {
    if (this.rulesCount === 0) {
      throw new Error(
        "ClientStyleSheet: speedy cannot be when rules have already been inserted"
      );
    }
    this.flush();
    this.speedy = bool;
    this.inject();
  }
  insertRule(rule, index) {
    if (this.speedy) {
      const sheet2 = this.getLatestSheet();
      if (typeof index !== "number") {
        index = sheet2.cssRules.length;
      }
      try {
        sheet2.insertRule(rule, index);
      } catch (error) {
        if (!isProduction) {
          console.warn(
            `ClientStyleSheet: illegal rule: 

${rule}

See https://stackoverflow.com/q/20007992 for more info`
          );
        }
        return -1;
      }
      return this.rulesCount++;
    }
    const insertionPoint = index ? this.tags[index] : void 0;
    this.tags = this.tags.concat(this.makeStyleTag(rule, insertionPoint));
    return this.rulesCount++;
  }
  deleteRule(index) {
    var _a2;
    if (index < 0) {
      return;
    }
    if (this.speedy) {
      const sheet2 = this.getLatestSheet();
      sheet2.deleteRule(index);
      sheet2.insertRule(this.deletedRulePlaceholder, index);
      return;
    }
    const tag = this.tags[index];
    if (!tag) {
      throw new Error(`ClientStyleSheet: rule at index \`${index}\` not found`);
    }
    (_a2 = tag.parentNode) == null ? void 0 : _a2.removeChild(tag);
    delete this.tags[index];
  }
  flush() {
    this.injected = false;
    this.rulesCount = 0;
    this.tags.forEach((tag) => {
      var _a2;
      return tag && ((_a2 = tag.parentNode) == null ? void 0 : _a2.removeChild(tag));
    });
    this.tags = [];
  }
  cssRules() {
    return this.tags.reduce(
      (rules, tag) => {
        if (tag) {
          return rules.concat(
            Array.from(
              this.getSheet(tag).cssRules,
              (rule) => rule.cssText === this.deletedRulePlaceholder ? void 0 : rule
            )
          );
        }
        return rules;
      },
      []
    );
  }
  makeStyleTag(cssString, relativeToTag) {
    var _a2;
    const tag = document.createElement("style");
    tag.setAttribute(`data-${this.name}`, "");
    const nonce = (_a2 = document.querySelector('meta[property="csp-nonce"]')) == null ? void 0 : _a2.getAttribute("content");
    if (nonce) {
      tag.setAttribute("nonce", nonce);
    }
    if (cssString) {
      tag.appendChild(document.createTextNode(cssString));
    }
    const head = document.head || document.getElementsByTagName("head")[0];
    if (relativeToTag) {
      head.insertBefore(tag, relativeToTag);
    } else {
      head.appendChild(tag);
    }
    return tag;
  }
  getSheet(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    const sheet2 = Array.from(document.styleSheets).find(
      (sheet22) => sheet22.ownerNode === tag
    );
    if (sheet2) {
      return sheet2;
    }
    throw new Error("ClientStyleSheet: styleSheet not found");
  }
  getLatestSheet() {
    const latestTag = this.tags[this.tags.length - 1];
    if (!latestTag) {
      throw new Error("ClientStyleSheet: style tag not found");
    }
    return this.getSheet(latestTag);
  }
};

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/registry/sheet/ServerStyleSheet.mjs
var ServerStyleSheet = class {
  constructor(name, speedy = false) {
    __publicField(this, "name");
    __publicField(this, "deletedRulePlaceholder");
    __publicField(this, "speedy");
    __publicField(this, "serverSheet");
    __publicField(this, "injected");
    __publicField(this, "rulesCount");
    this.name = name;
    this.deletedRulePlaceholder = `#${name}-deleted-rule{}`;
    this.speedy = speedy;
    this.serverSheet = void 0;
    this.injected = false;
    this.rulesCount = 0;
  }
  inject() {
    if (this.injected) {
      throw new Error("ServerStyleSheet: sheet already injected");
    }
    this.serverSheet = {
      cssRules: [],
      insertRule: (rule, index) => {
        if (typeof index === "number") {
          this.getSheet().cssRules[index] = { cssText: rule };
          return index;
        }
        this.getSheet().cssRules.push({ cssText: rule });
        return this.getSheet().cssRules.length - 1;
      },
      deleteRule: (index) => {
        delete this.getSheet().cssRules[index];
      }
    };
    this.injected = true;
  }
  setSpeedy(bool) {
    if (this.rulesCount === 0) {
      throw new Error(
        "ServerStyleSheet: speedy cannot be when rules have already been inserted"
      );
    }
    this.flush();
    this.speedy = bool;
    this.inject();
  }
  isSpeedy() {
    return this.speedy;
  }
  insertRule(rule, index) {
    if (typeof index !== "number") {
      index = this.getSheet().cssRules.length;
    }
    this.getSheet().insertRule(rule, index);
    return this.rulesCount++;
  }
  deleteRule(index) {
    if (index < 0) {
      return;
    }
    const sheet2 = this.getSheet();
    sheet2.deleteRule(index);
    sheet2.insertRule(this.deletedRulePlaceholder, index);
  }
  flush() {
    this.injected = false;
    this.rulesCount = 0;
    this.getSheet().cssRules = [];
  }
  cssRules() {
    return this.getSheet().cssRules;
  }
  getSheet() {
    if (!this.serverSheet) {
      throw new Error("ServerStyleSheet: sheet not injected");
    }
    return this.serverSheet;
  }
};

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/registry/sheet/StyleSheet.mjs
var StyleSheet = class {
  constructor(name, speedy = false) {
    return isBrowser ? new ClientStyleSheet(name, speedy) : new ServerStyleSheet(name, speedy);
  }
};

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/registry/StyleSheetRegistry.mjs
var STYLE_ID_PREFIX = "__";
var StyleSheetRegistry = class {
  constructor() {
    __publicField(this, "sheet");
    __publicField(this, "serverSideRenderedStyleMap", null);
    __publicField(this, "indexesMap", {});
    __publicField(this, "instancesCountMap", {});
    this.sheet = new StyleSheet("kuma-ui", isProduction);
    this.sheet.inject();
  }
  add(id, css2) {
    var _a2;
    if (isBrowser && this.serverSideRenderedStyleMap === null) {
      this.serverSideRenderedStyleMap = this.getServerSideRenderedStyleMap();
      Object.keys(this.serverSideRenderedStyleMap).forEach((id2) => {
        this.instancesCountMap[id2] = 0;
      });
    }
    this.instancesCountMap[id] = 1 + (this.instancesCountMap[id] ?? 0);
    const serverSideRenderedStyle = (_a2 = this.serverSideRenderedStyleMap) == null ? void 0 : _a2[id];
    if (this.instancesCountMap[id] === 1 && !serverSideRenderedStyle) {
      compile(css2).forEach((element) => {
        const rule = serialize([element], stringify);
        this.indexesMap[id] = (this.indexesMap[id] || []).concat(
          this.sheet.insertRule(rule)
        );
      });
    }
  }
  remove(id) {
    var _a2, _b;
    if (this.instancesCountMap[id] === void 0) {
      throw new Error(
        `StyleSheetRegistry: id: \`${id}\` not found in idInstancesCountMap.`
      );
    }
    this.instancesCountMap[id] -= 1;
    if (this.instancesCountMap[id] !== 0) {
      return;
    }
    const serverSideRenderedStyle = (_a2 = this.serverSideRenderedStyleMap) == null ? void 0 : _a2[id];
    if (serverSideRenderedStyle) {
      serverSideRenderedStyle.remove();
      (_b = this.serverSideRenderedStyleMap) == null ? true : delete _b[id];
    } else {
      if (this.indexesMap[id] === void 0) {
        throw new Error(
          `StyleSheetRegistry: id: \`${id}\` not found in idIndexesMap.`
        );
      }
      this.indexesMap[id].forEach((index) => this.sheet.deleteRule(index));
      delete this.indexesMap[id];
    }
    delete this.instancesCountMap[id];
  }
  styles(options = {}) {
    return Object.keys(this.indexesMap).map((id) => {
      const indexes = this.indexesMap[id];
      if (indexes === void 0) {
        return null;
      }
      const cssRules = this.sheet.cssRules();
      const css2 = indexes.map((index) => {
        var _a2;
        return (_a2 = cssRules[index]) == null ? void 0 : _a2.cssText;
      }).filter(Boolean).join(this.sheet.isSpeedy() ? "" : "\n");
      if (css2.length === 0) {
        return null;
      }
      return import_react.default.createElement("style", {
        id: `${STYLE_ID_PREFIX}${id}`,
        key: `${STYLE_ID_PREFIX}${id}`,
        nonce: options.nonce ? options.nonce : void 0,
        dangerouslySetInnerHTML: {
          __html: css2
        }
      });
    }).filter(Boolean);
  }
  flush() {
    this.sheet.flush();
    this.sheet.inject();
    this.serverSideRenderedStyleMap = null;
    this.indexesMap = {};
    this.instancesCountMap = {};
  }
  getServerSideRenderedStyleMap() {
    const elements = Array.from(
      document.querySelectorAll(`[id^="${STYLE_ID_PREFIX}"]`)
    );
    return elements.reduce(
      (styles, element) => {
        const id = element.id.replace(STYLE_ID_PREFIX, "");
        styles[id] = element;
        return styles;
      },
      {}
    );
  }
};

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/registry/StyleRegistry.mjs
var StyleSheetContext = import_react2.default.createContext(
  null
);
StyleSheetContext.displayName = "StyleSheetContext";
function createStyleRegistry() {
  return new StyleSheetRegistry();
}
function StyleRegistry({
  registry: configuredRegistry,
  children
}) {
  const rootRegistry = import_react2.default.useContext(StyleSheetContext);
  const [registry] = import_react2.default.useState(
    () => rootRegistry || configuredRegistry || createStyleRegistry()
  );
  return import_react2.default.createElement(
    StyleSheetContext.Provider,
    { value: registry },
    children
  );
}
function useStyleRegistry() {
  return import_react2.default.useContext(StyleSheetContext);
}

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-2RTIHCNV.mjs
var spaceMappings = {
  margin: "margin",
  m: "margin",
  marginTop: "margin-top",
  mt: "margin-top",
  marginRight: "margin-right",
  mr: "margin-right",
  marginBottom: "margin-bottom",
  mb: "margin-bottom",
  marginLeft: "margin-left",
  ml: "margin-left",
  marginX: "margin-left,margin-right",
  mx: "margin-left,margin-right",
  marginY: "margin-top,margin-bottom",
  my: "margin-top,margin-bottom",
  padding: "padding",
  p: "padding",
  paddingTop: "padding-top",
  pt: "padding-top",
  paddingRight: "padding-right",
  pr: "padding-right",
  paddingBottom: "padding-bottom",
  pb: "padding-bottom",
  paddingLeft: "padding-left",
  pl: "padding-left",
  paddingX: "padding-left,padding-right",
  px: "padding-left,padding-right",
  paddingY: "padding-top,padding-bottom",
  py: "padding-top,padding-bottom"
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-WGUPF5LI.mjs
var textMappings = {
  textAlign: "text-align",
  textAlignLast: "text-align-last",
  textCombineUpright: "text-combine-upright",
  textDecoration: "text-decoration",
  textDecorationColor: "text-decoration-color",
  textDecorationLine: "text-decoration-line",
  textDecorationSkipInk: "text-decoration-skip-ink",
  textDecorationStyle: "text-decoration-style",
  textDecorationThickness: "text-decoration-thickness",
  textEmphasis: "text-emphasis",
  textEmphasisColor: "text-emphasis-color",
  textEmphasisPosition: "text-emphasis-position",
  textEmphasisStyle: "text-emphasis-style",
  textIndent: "text-indent",
  textJustify: "text-justify",
  textOrientation: "text-orientation",
  textOverflow: "text-overflow",
  textRendering: "text-rendering",
  textShadow: "text-shadow",
  textTransform: "text-transform",
  textUnderlineOffset: "text-underline-offset",
  textUnderlinePosition: "text-underline-position"
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-VVLDBR4F.mjs
var typographyMappings = {
  hyphenateCharacter: "hyphenate-character",
  hyphenateLimitChars: "hyphenate-limit-chars",
  hyphens: "hyphens",
  hangingPunctuation: "hanging-punctuation",
  lineHeight: "line-height",
  lineBreak: "line-break",
  orphans: "orphans",
  quotes: "quotes",
  rubyPosition: "ruby-position",
  unicodeBidi: "unicode-bidi",
  widows: "widows",
  whiteSpace: "white-space",
  letterSpacing: "letter-spacing",
  wordBreak: "word-break",
  wordSpacing: "word-spacing",
  writingMode: "writing-mode"
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-M4YB5ZLQ.mjs
var fontMappings = {
  font: "font",
  fontFamily: "font-family",
  fontFeatureSettings: "font-feature-settings",
  fontKerning: "font-kerning",
  fontLanguageOverride: "font-language-override",
  fontOpticalSizing: "font-optical-sizing",
  fontPalette: "font-palette",
  fontSize: "font-size",
  fontSizeAdjust: "font-size-adjust",
  fontStretch: "font-stretch",
  fontStyle: "font-style",
  fontSynthesis: "font-synthesis",
  fontVariant: "font-variant",
  fontVariantAlternates: "font-variant-alternates",
  fontVariantCaps: "font-variant-caps",
  fontVariantEastAsian: "font-variant-east-asian",
  fontVariantEmoji: "font-variant-emoji",
  fontVariantLigatures: "font-variant-ligatures",
  fontVariantNumeric: "font-variant-numeric",
  fontVariantPosition: "font-variant-position",
  fontVariationSettings: "font-variation-settings",
  fontWeight: "font-weight"
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-FKAJGU54.mjs
var gridMappings = {
  grid: "grid",
  gridArea: "grid-area",
  gridAutoColumns: "grid-auto-columns",
  gridAutoFlow: "grid-auto-flow",
  gridAutoRows: "grid-auto-rows",
  gridColumn: "grid-column",
  gridColumnEnd: "grid-column-end",
  gridColumnStart: "grid-column-start",
  gridRow: "grid-row",
  gridRowEnd: "grid-row-end",
  gridRowStart: "grid-row-start",
  gridTemplate: "grid-template",
  gridTemplateAreas: "grid-template-areas",
  gridTemplateColumns: "grid-template-columns",
  gridTemplateRows: "grid-template-rows",
  gridGap: "grid-gap",
  gridColumnGap: "grid-column-gap",
  gridRowGap: "grid-row-gap"
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-MAQPFFKF.mjs
var layoutMappings = {
  width: "width",
  w: "width",
  minWidth: "min-width",
  minW: "min-width",
  maxWidth: "max-width",
  maxW: "max-width",
  height: "height",
  h: "height",
  minHeight: "min-height",
  minH: "min-height",
  maxHeight: "max-height",
  maxH: "max-height",
  display: "display",
  overflow: "overflow",
  overflowX: "overflow-x",
  overflowY: "overflow-y",
  position: "position",
  zIndex: "z-index",
  cursor: "cursor",
  aspectRatio: "aspect-ratio",
  boxSizing: "box-sizing",
  float: "float",
  clear: "clear",
  objectFit: "object-fit",
  objectPosition: "object-position",
  resize: "resize",
  verticalAlign: "vertical-align",
  userSelect: "user-select"
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-W4G6JS6Y.mjs
var listMappings = {
  listStyle: "list-style",
  listStyleImage: "list-style-image",
  listStylePosition: "list-style-position",
  listStyleType: "list-style-type"
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-2KCBTLDN.mjs
var maskMappings = {
  mask: "mask",
  maskBorder: "mask-border",
  maskBorderMode: "mask-border-mode",
  maskBorderOutset: "mask-border-outset",
  maskBorderRepeat: "mask-border-repeat",
  maskBorderSlice: "mask-border-slice",
  maskBorderSource: "mask-border-source",
  maskBorderWidth: "mask-border-width",
  maskClip: "mask-clip",
  maskComposite: "mask-composite",
  maskImage: "mask-image",
  maskMode: "mask-mode",
  maskOrigin: "mask-origin",
  maskPosition: "mask-position",
  maskRepeat: "mask-repeat",
  maskSize: "mask-size",
  maskType: "mask-type"
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-J7IZ7E6Z.mjs
var outlineMappings = {
  outline: "outline",
  outlineOffset: "outline-offset",
  outlineWidth: "outline-width",
  outlineStyle: "outline-style"
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-HS3ZP4BH.mjs
var positionMappings = {
  top: "top",
  right: "right",
  left: "left",
  bottom: "bottom",
  inset: "inset"
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-MHHUKXNJ.mjs
var shadowMappings = {
  boxShadow: "box-shadow",
  textShadow: "text-shadow"
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-ONWZTIZM.mjs
var animationMappings = {
  animation: "animation",
  animationComposition: "animation-composition",
  animationDelay: "animation-delay",
  animationDirection: "animation-direction",
  animationDuration: "animation-duration",
  animationFillMode: "animation-fill-mode",
  animationName: "animation-name",
  animationIterationCount: "animation-iteration-count",
  animationPlayState: "animation-play-state",
  animationTimeline: "animation-timeline",
  animationTimingFunction: "animation-timing-function"
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-UNT4TC5V.mjs
var backgroundMappings = {
  backgroundImage: "background-image",
  bgImage: "background-image",
  backgroundPosition: "background-position",
  bgPosition: "background-position",
  backgroundPositionX: "background-position-x",
  bgPositionX: "background-position-x",
  backgroundPositionY: "background-position-y",
  bgPositionY: "background-position-y",
  backgroundSize: "background-size",
  bgSize: "background-size",
  backgroundRepeat: "background-repeat",
  bgRepeat: "background-repeat",
  backgroundAttachment: "background-attachment",
  bgAttachment: "background-attachment",
  backgroundClip: "background-clip",
  bgClip: "background-clip",
  backgroundOrigin: "background-origin",
  bgOrigin: "background-origin",
  backgroundBlendMode: "background-blend-mode",
  bgBlendMode: "background-blend-mode"
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-H4HDYMNX.mjs
var borderMappings = {
  border: "border",
  borderTop: "border-top",
  borderRight: "border-right",
  borderLeft: "border-left",
  borderBottom: "border-bottom",
  borderX: "border-left,border-right",
  borderY: "border-top,border-bottom",
  borderRadius: "border-radius",
  borderTopLeftRadius: "border-top-left-radius",
  borderTopRightRadius: "border-top-right-radius",
  borderBottomLeftRadius: "border-bottom-left-radius",
  borderBottomRightRadius: "border-bottom-right-radius",
  borderStyle: "border-style",
  borderTopStyle: "border-top-style",
  borderBottomStyle: "border-bottom-style",
  borderLeftStyle: "border-left-style",
  borderRightStyle: "border-right-style",
  borderWidth: "border-width",
  borderTopWidth: "border-top-width",
  borderBottomWidth: "border-bottom-width",
  borderLeftWidth: "border-left-width",
  borderRightWidth: "border-right-width",
  borderStart: "border-inline-start",
  borderEnd: "border-inline-end",
  borderStartWidth: "border-inline-start-width",
  borderEndWidth: "border-inline-end-width",
  borderStartStyle: "border-inline-start-style",
  borderEndStyle: "border-inline-end-style",
  borderStartRadius: "border-top-left-radius,border-bottom-left-radius",
  borderEndRadius: "border-top-right-radius,border-bottom-right-radius"
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-QJTHOKZX.mjs
var colorMappings = {
  background: "background",
  bg: "background",
  backgroundColor: "background-color",
  bgColor: "background-color",
  color: "color",
  borderColor: "border-color",
  outlineColor: "outline-color",
  accentColor: "accent-color",
  caretColor: "caret-color",
  opacity: "opacity",
  visibility: "visibility"
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-J57Z7DR3.mjs
var columnMappings = {
  columnCount: "column-count",
  columnFill: "column-fill",
  columnGap: "column-gap",
  columnRule: "column-rule",
  columnRuleColor: "column-rule-color",
  columnRuleStyle: "column-rule-style",
  columnRuleWidth: "column-rule-width",
  columnSpan: "column-span",
  columnWidth: "column-width",
  columns: "columns"
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-IPKVEMUL.mjs
var effectMappings = {
  transition: "transition",
  transitionDuration: "transition-duration",
  transitionProperty: "transition-property",
  transitionTimingFunction: "transition-timing-function",
  transitionDelay: "transition-delay",
  transform: "transform",
  transformBox: "transform-box",
  transformOrigin: "transform-origin",
  transformStyle: "transform-style",
  clipPath: "clip-path"
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-DN4HZKMD.mjs
var filterMappings = {
  filter: "filter",
  backdropFilter: "backdrop-filter"
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-QODA3KRU.mjs
var flexMappings = {
  flexDirection: "flex-direction",
  flexDir: "flex-direction",
  justifyContent: "justify-content",
  justify: "justify-content",
  alignContent: "align-content",
  alignItems: "align-items",
  alignSelf: "align-self",
  flex: "flex",
  flexBasis: "flex-basis",
  flexFlow: "flex-flow",
  flexGrow: "flex-grow",
  flexShrink: "flex-shrink",
  flexWrap: "flex-wrap",
  justifyItems: "justify-items",
  justifySelf: "justify-self",
  gap: "gap",
  placeItems: "place-items",
  placeContent: "place-content"
};

// node_modules/.pnpm/@kuma-ui+sheet@1.3.1/node_modules/@kuma-ui/sheet/dist/chunk-I7HLEBXK.mjs
function generateHash(str) {
  const m = 1540483477;
  const r = 24;
  const seed = 305419896;
  const len = str.length;
  let h = seed ^ len;
  for (let i = 0; i < len; i++) {
    let k2 = str.charCodeAt(i);
    k2 *= m;
    k2 ^= k2 >>> r;
    k2 *= m;
    h *= m;
    h ^= k2;
  }
  h ^= h >>> 13;
  h *= m;
  h ^= h >>> 15;
  return (h >>> 0).toString();
}

// node_modules/.pnpm/@kuma-ui+sheet@1.3.1/node_modules/@kuma-ui/sheet/dist/chunk-NHABU752.mjs
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField2 = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// node_modules/.pnpm/@kuma-ui+sheet@1.3.1/node_modules/@kuma-ui/sheet/dist/chunk-2AYKPE32.mjs
var applyT = (input, placeholders) => {
  return applyPlaceholders(input, placeholders);
};
var applyPlaceholders = (input, placeholders) => {
  const regex = /\bt\s*\(\s*["']([^"']+)["']\s*\)/g;
  return input.replace(regex, (match, placeholder) => {
    if (typeof placeholder === "string" && placeholder in placeholders) {
      return placeholders[placeholder];
    }
    return match;
  });
};
var createPlaceholders = (theme2) => {
  const result = {};
  for (const token of tokens) {
    const tokenValue = theme2[token];
    if (tokenValue) {
      for (const key in tokenValue) {
        result[key] = tokenValue[key];
      }
    }
  }
  return result;
};
var defaultBreakpoints = Object.freeze({
  sm: "576px",
  md: "768px",
  lg: "992px",
  xl: "1200px"
});
var tokens = [
  "colors",
  "fonts",
  "fontSizes",
  "fontWeights",
  "lineHeights",
  "letterSpacings",
  "spacings",
  "sizes",
  "radii",
  "zIndices",
  "breakpoints"
];
var _a;
var _Theme = class {
  constructor() {
    __publicField(this, "_userTheme", {
      ...globalThis.__KUMA_USER_THEME__,
      breakpoints: ((_a = globalThis.__KUMA_USER_THEME__) == null ? void 0 : _a.breakpoints) ?? defaultBreakpoints
    });
    __publicField(this, "_placeholders", {});
  }
  static getInstance() {
    if (!_Theme.instance) {
      _Theme.instance = new _Theme();
    }
    return _Theme.instance;
  }
  setUserTheme(userTheme) {
    if (Object.keys(userTheme.breakpoints || {}).length === 0) {
      delete userTheme.breakpoints;
    }
    this._userTheme = {
      ...this._userTheme,
      ...userTheme
    };
    this._placeholders = createPlaceholders(this._userTheme);
  }
  getUserTheme() {
    return this._userTheme;
  }
  getPlaceholders() {
    return this._placeholders;
  }
  getVariants(componentName) {
    var _a2;
    return ((_a2 = this._userTheme.components) == null ? void 0 : _a2[componentName]) || {};
  }
  reset() {
    this._userTheme = {
      breakpoints: defaultBreakpoints
    };
  }
};
var Theme = _Theme;
__publicField2(Theme, "instance");
var theme = Theme.getInstance();

// node_modules/.pnpm/@kuma-ui+sheet@1.3.1/node_modules/@kuma-ui/sheet/dist/chunk-SJVR7MXP.mjs
var removeSpacesAroundCssPropertyValues = (css2) => {
  const regex = /(:)\s+|\s+(?=;)/g;
  return css2.replace(regex, "$1");
};
var removeSpacesExceptInProperties = (css2) => {
  const regex = /(:)\s+|\s+(?=;)|(\{)\s+|\s+(?=\})|(,)\s+|\s+(?=,)|\s+(?={)/g;
  return css2.replace(regex, "$1$2$3");
};

// node_modules/.pnpm/@kuma-ui+sheet@1.3.1/node_modules/@kuma-ui/sheet/dist/chunk-6QRAHIBE.mjs
var _Sheet = class {
  constructor() {
    __publicField(this, "base");
    __publicField(this, "responsive");
    __publicField(this, "pseudo");
    __publicField(this, "css");
    this.base = [];
    this.responsive = [];
    this.pseudo = [];
    this.css = [];
  }
  static getInstance() {
    if (!_Sheet.instance) {
      _Sheet.instance = new _Sheet();
    }
    return _Sheet.instance;
  }
  static getClassNamePrefix(isDynamic = false) {
    const isProduction2 = false;
    if (isProduction2)
      return "kuma-";
    return isDynamic ? "🦄-" : "🐻-";
  }
  addRule(style, isDynamic = false) {
    const className = _Sheet.getClassNamePrefix(isDynamic) + generateHash(JSON.stringify(style));
    this._addBaseRule(className, this._processCSS(style.base));
    for (const [breakpoint, css2] of Object.entries(style.responsive)) {
      this._addMediaRule(
        className,
        this._processCSS(css2),
        this._processCSS(breakpoint)
      );
    }
    for (const [_, pseudo] of Object.entries(style.pseudo)) {
      this._addPseudoRule(className, pseudo);
    }
    return className;
  }
  _addBaseRule(className, css2) {
    const minifiedCss = removeSpacesAroundCssPropertyValues(css2);
    this.base.push(`.${className}{${minifiedCss}}`);
  }
  _addMediaRule(className, css2, breakpoint) {
    const minifiedCss = removeSpacesAroundCssPropertyValues(css2);
    const mediaCss = removeSpacesExceptInProperties(
      `@media (min-width: ${breakpoint}) { .${className} { ${minifiedCss} } }`
    );
    this.responsive.push(mediaCss);
  }
  _addPseudoRule(className, pseudo) {
    const css2 = removeSpacesAroundCssPropertyValues(
      this._processCSS(pseudo.base)
    );
    const pseudoCss = removeSpacesExceptInProperties(
      `.${className}${pseudo.key} { ${css2} }`
    );
    this.pseudo.push(pseudoCss);
    for (const [breakpoint, _css] of Object.entries(pseudo.responsive)) {
      this._addMediaRule(
        `${className}${pseudo.key}`,
        this._processCSS(_css),
        this._processCSS(breakpoint)
      );
    }
  }
  _processCSS(css2) {
    const placeholders = theme.getPlaceholders();
    return applyT(css2, placeholders);
  }
  /**
   * parseCSS takes in raw CSS and parses it to valid CSS using Stylis.
   * It's useful for handling complex CSS such as media queries and pseudo selectors.
   */
  parseCSS(style) {
    style = this._processCSS(style);
    const id = _Sheet.getClassNamePrefix() + generateHash(style);
    const elements = [];
    compile(`.${id}{${style}}`).forEach((element) => {
      const { breakpoints } = theme.getUserTheme();
      if (element.type === "@media") {
        const props = Array.isArray(element.props) ? element.props : [element.props];
        const newProps = [];
        let newValue = element.value;
        for (const key in breakpoints) {
          newValue = newValue.replaceAll(key, breakpoints[key]);
        }
        props.forEach((prop) => {
          for (const key in breakpoints) {
            newProps.push(prop.replaceAll(key, breakpoints[key]));
            break;
          }
        });
        element.props = newProps;
        element.value = newValue;
      }
      elements.push(element);
    });
    const css2 = serialize(elements, stringify);
    this.css.push(css2);
    return id;
  }
  removeDuplicates() {
    this.base = [...new Set(this.base)];
    this.responsive = [...new Set(this.responsive)];
    this.pseudo = [...new Set(this.pseudo)];
    this.css = [...new Set(this.css)];
  }
  getCSS() {
    this.removeDuplicates();
    return this.base.join("") + this.responsive.join("") + this.pseudo.join("") + this.css.join("");
  }
  reset() {
    this.base = [];
    this.responsive = [];
    this.pseudo = [];
    this.css = [];
  }
};
var Sheet = _Sheet;
__publicField2(Sheet, "instance");
var sheet = Sheet.getInstance();

// node_modules/.pnpm/@kuma-ui+sheet@1.3.1/node_modules/@kuma-ui/sheet/dist/chunk-WROZBO6S.mjs
var _StyleCache = class {
  constructor() {
    __publicField(this, "cache");
    this.cache = /* @__PURE__ */ new Map();
  }
  static getInstance() {
    if (!_StyleCache.instance) {
      _StyleCache.instance = new _StyleCache();
    }
    return _StyleCache.instance;
  }
  get(key) {
    return this.cache.get(key);
  }
  set(key, styles) {
    this.cache.set(key, styles);
  }
  reset() {
    this.cache.clear();
  }
};
var StyleCache = _StyleCache;
__publicField2(StyleCache, "instance");
var styleCache = StyleCache.getInstance();

// node_modules/.pnpm/@kuma-ui+sheet@1.3.1/node_modules/@kuma-ui/sheet/dist/chunk-B5LLOQJC.mjs
var _StyleMap = class {
  constructor() {
    __publicField(this, "map");
    this.map = /* @__PURE__ */ new Map();
  }
  static getInstance() {
    if (!_StyleMap.instance) {
      _StyleMap.instance = new _StyleMap();
    }
    return _StyleMap.instance;
  }
  // Add the given CSS for the specified file to the map.
  // In the future, we might use an id to associate the HTML tag
  // with the corresponding CSS (by using the data-kuma-ui attribute)
  // and improve performance by removing duplicate CSS across different files.
  set(fileName, css2) {
    this.map.set(fileName, css2);
  }
  get(fileName) {
    return this.map.get(fileName);
  }
  delete(fileName) {
    this.map.delete(fileName);
  }
  reset() {
    this.map.clear();
  }
};
var StyleMap = _StyleMap;
__publicField2(StyleMap, "instance");
var styleMap = StyleMap.getInstance();

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-NLLGTSGT.mjs
var applyResponsiveStyles = (cssProperty, cssValues, convertFn = (value) => value) => {
  const { breakpoints } = theme.getUserTheme();
  const media = {};
  if (Array.isArray(cssValues)) {
    const baseValue = convertFn(cssValues[0]);
    cssValues.slice(1).map((value, index) => {
      if (breakpoints) {
        const breakpoint = Object.keys(breakpoints)[index];
        const breakpointValue = breakpoints[breakpoint];
        media[breakpointValue] = `${cssProperty}: ${convertFn(value)};`;
      }
    });
    return { base: `${cssProperty}: ${baseValue};`, media };
  }
  return { base: `${cssProperty}: ${convertFn(cssValues)};`, media: {} };
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-YMO7ZQ5C.mjs
var unitless = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};
function toCssUnit(propertyName, value) {
  if (typeof value === "number") {
    return `${value}${!(propertyName in unitless) ? "px" : ""}`;
  }
  return value;
}

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-CMEWWC2X.mjs
var styleMappings = Object.assign(
  {},
  animationMappings,
  spaceMappings,
  typographyMappings,
  layoutMappings,
  colorMappings,
  flexMappings,
  borderMappings,
  outlineMappings,
  positionMappings,
  shadowMappings,
  gridMappings,
  listMappings,
  effectMappings,
  textMappings,
  fontMappings,
  maskMappings,
  columnMappings,
  backgroundMappings,
  filterMappings
);
var consumeStyleProps = (props) => {
  var _a2;
  const cacheKey = JSON.stringify(props);
  const cachedStyles = styleCache.get(cacheKey);
  if (cachedStyles) {
    return cachedStyles;
  }
  let base = "";
  const media = {};
  for (const key in props) {
    const cssValue = props[key];
    if (cssValue == null)
      continue;
    const properties = ((_a2 = styleMappings[key]) == null ? void 0 : _a2.split(",")) ?? [];
    for (const property of properties) {
      const responsiveStyles = applyResponsiveStyles(
        property,
        cssValue,
        (value) => toCssUnit(key, value)
      );
      base += responsiveStyles.base;
      for (const [breakpoint, css2] of Object.entries(responsiveStyles.media)) {
        if (media[breakpoint]) {
          media[breakpoint] += css2;
        } else {
          media[breakpoint] = css2;
        }
      }
    }
  }
  const combinedStyles = { base, media };
  styleCache.set(cacheKey, combinedStyles);
  return combinedStyles;
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-UKLKEGNU.mjs
var styleKeys = {
  animation: [
    "animation",
    "animationComposition",
    "animationDelay",
    "animationDirection",
    "animationDuration",
    "animationFillMode",
    "animationIterationCount",
    "animationName",
    "animationPlayState",
    "animationTimeline",
    "animationTimingFunction"
  ],
  space: [
    "margin",
    "m",
    "marginTop",
    "mt",
    "marginBottom",
    "mb",
    "marginLeft",
    "ml",
    "marginRight",
    "mr",
    "marginX",
    "mx",
    "marginY",
    "my",
    "padding",
    "p",
    "paddingTop",
    "pt",
    "paddingBottom",
    "pb",
    "paddingLeft",
    "pl",
    "paddingRight",
    "pr",
    "paddingX",
    "px",
    "paddingY",
    "py"
  ],
  typography: [
    "hyphenateCharacter",
    "hyphenateLimitChars",
    "hyphens",
    "hangingPunctuation",
    "lineHeight",
    "lineBreak",
    "letterSpacing",
    "orphans",
    "quotes",
    "rubyPosition",
    "unicodeBidi",
    "widows",
    "whiteSpace",
    "wordBreak",
    "wordSpacing",
    "writingMode"
  ],
  fontKeys: [
    "font",
    "fontFamily",
    "fontFeatureSettings",
    "fontKerning",
    "fontLanguageOverride",
    "fontOpticalSizing",
    "fontPalette",
    "fontSize",
    "fontSizeAdjust",
    "fontStretch",
    "fontStyle",
    "fontSynthesis",
    "fontVariant",
    "fontVariantAlternates",
    "fontVariantCaps",
    "fontVariantEastAsian",
    "fontVariantEmoji",
    "fontVariantLigatures",
    "fontVariantNumeric",
    "fontVariantPosition",
    "fontVariationSettings",
    "fontWeight"
  ],
  textKeys: [
    "textAlign",
    "textAlignLast",
    "textCombineUpright",
    "textDecoration",
    "textDecorationColor",
    "textDecorationLine",
    "textDecorationSkipInk",
    "textDecorationStyle",
    "textDecorationThickness",
    "textEmphasis",
    "textEmphasisColor",
    "textEmphasisPosition",
    "textEmphasisStyle",
    "textIndent",
    "textJustify",
    "textOrientation",
    "textOverflow",
    "textRendering",
    "textShadow",
    "textTransform",
    "textUnderlineOffset",
    "textUnderlinePosition"
  ],
  layout: [
    "width",
    "w",
    "minWidth",
    "minW",
    "maxWidth",
    "maxW",
    "height",
    "h",
    "minHeight",
    "minH",
    "maxHeight",
    "maxH",
    "display",
    "overflow",
    "overflowX",
    "overflowY",
    "position",
    "zIndex",
    "cursor",
    "userSelect",
    "aspectRatio",
    "boxSizing",
    "float",
    "clear",
    "objectFit",
    "objectPosition",
    "resize",
    "verticalAlign"
  ],
  flex: [
    "flexDirection",
    "flexDir",
    "justifyContent",
    "justify",
    "alignItems",
    "alignContent",
    "alignSelf",
    "flex",
    "flexFlow",
    "flexWrap",
    "flexGrow",
    "flexShrink",
    "flexBasis",
    "justifyItems",
    "justifySelf",
    "placeItems",
    "placeContent",
    "gap"
  ],
  color: [
    "background",
    "bg",
    "backgroundColor",
    "bgColor",
    "color",
    "borderColor",
    "outlineColor",
    "accentColor",
    "caretColor",
    "opacity",
    "visibility"
  ],
  border: [
    "border",
    "borderWidth",
    "borderTopWidth",
    "borderBottomWidth",
    "borderLeftWidth",
    "borderRightWidth",
    "borderStyle",
    "borderTopStyle",
    "borderBottomStyle",
    "borderLeftStyle",
    "borderRightStyle",
    "borderRadius",
    "borderTopLeftRadius",
    "borderTopRightRadius",
    "borderBottomLeftRadius",
    "borderBottomRightRadius",
    "borderTop",
    "borderRight",
    "borderBottom",
    "borderLeft",
    "borderX",
    "borderY",
    "borderStart",
    "borderEnd",
    "borderStartWidth",
    "borderEndWidth",
    "borderStartStyle",
    "borderEndStyle",
    "borderStartRadius",
    "borderEndRadius"
  ],
  outline: [
    "outline",
    "outlineWidth",
    "outlineStyle",
    "outlineOffset"
  ],
  position: ["top", "right", "bottom", "left", "inset"],
  shadow: ["textShadow", "boxShadow"],
  list: [
    "listStyle",
    "listStyleImage",
    "listStylePosition",
    "listStyleType"
  ],
  grid: [
    "grid",
    "gridArea",
    "gridAutoColumns",
    "gridAutoFlow",
    "gridAutoRows",
    "gridColumn",
    "gridColumnEnd",
    "gridColumnStart",
    "gridRow",
    "gridRowEnd",
    "gridRowStart",
    "gridTemplate",
    "gridTemplateAreas",
    "gridTemplateColumns",
    "gridTemplateRows",
    "gridGap",
    "gridColumnGap",
    "gridRowGap"
  ],
  column: [
    "columnCount",
    "columnFill",
    "columnGap",
    "columnRule",
    "columnRuleColor",
    "columnRuleStyle",
    "columnRuleWidth",
    "columnSpan",
    "columnWidth",
    "columns"
  ],
  effect: [
    "transition",
    "transitionDuration",
    "transitionProperty",
    "transitionTimingFunction",
    "transitionDelay",
    "transform",
    "transformBox",
    "transformOrigin",
    "transformStyle",
    "clipPath"
  ],
  mask: [
    "mask",
    "maskBorder",
    "maskBorderMode",
    "maskBorderOutset",
    "maskBorderRepeat",
    "maskBorderSlice",
    "maskBorderSource",
    "maskBorderWidth",
    "maskClip",
    "maskComposite",
    "maskImage",
    "maskMode",
    "maskOrigin",
    "maskPosition",
    "maskRepeat",
    "maskSize",
    "maskType"
  ],
  background: [
    "backgroundImage",
    "bgImage",
    "backgroundPosition",
    "bgPosition",
    "backgroundPositionX",
    "bgPositionX",
    "backgroundPositionY",
    "bgPositionY",
    "backgroundSize",
    "bgSize",
    "backgroundRepeat",
    "bgRepeat",
    "backgroundAttachment",
    "bgAttachment",
    "backgroundClip",
    "bgClip",
    "backgroundOrigin",
    "bgOrigin",
    "backgroundBlendMode",
    "bgBlendMode"
  ],
  filter: ["filter", "backdropFilter"]
};
function memo(fn) {
  const cache = /* @__PURE__ */ Object.create(null);
  return (arg) => {
    if (cache[arg] === void 0)
      cache[arg] = fn(arg);
    return cache[arg];
  };
}
var isStyledProp = memo((_prop) => {
  const prop = _prop;
  return Object.values(styleKeys).some(
    (keyGroup) => keyGroup.includes(prop)
  );
});

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-QKDAV5R5.mjs
var normalizePseudo = (props) => {
  return props.replace("_", ":");
};
var isPseudoProps = (props) => {
  return `${props}`.startsWith("_");
};

// node_modules/.pnpm/@kuma-ui+system@1.7.4/node_modules/@kuma-ui/system/dist/chunk-A7WWMADX.mjs
var StyleGenerator = class {
  constructor(props, isDynamic = false) {
    __publicField(this, "style");
    __publicField(this, "className");
    if (!props || Object.keys(props).length === 0) {
      this.className = "";
      return;
    }
    const styledProps = {};
    const pseudoProps = {};
    const findThemeStyle = (value) => {
      const userTheme = theme.getUserTheme();
      const propKey = value.split(".")[0];
      if (userTheme[propKey] === void 0)
        return void 0;
      for (const key in userTheme[propKey]) {
        if (value === key) {
          return userTheme[propKey][key];
        }
      }
      return void 0;
    };
    const isThemeStyle = (propValue) => {
      return typeof propValue === "string" && /[a-zA-Z]+\.[a-zA-Z0-9]+/.test(propValue) && !/^\w+\(.*\)$/.test(propValue);
    };
    const convertStyle = (name, value) => {
      if (Array.isArray(value)) {
        return value.map((v) => {
          if (isThemeStyle(v)) {
            const customStyle = findThemeStyle(v);
            if (customStyle !== void 0) {
              return customStyle;
            }
          }
          return v;
        });
      } else if (isThemeStyle(value)) {
        const customStyle = findThemeStyle(value);
        if (customStyle !== void 0) {
          return customStyle;
        }
      } else if (isStyledProp(name)) {
        return value;
      }
      return value;
    };
    for (const [propName, propValue] of Object.entries(props)) {
      if (isPseudoProps(propName)) {
        pseudoProps[propName] = propValue;
        for (const [name, value] of Object.entries(propValue)) {
          pseudoProps[propName] = {
            ...pseudoProps[propName],
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- FIXME
            [name]: convertStyle(name, value)
          };
        }
      } else {
        styledProps[propName] = convertStyle(propName, propValue);
      }
    }
    const convertedPseudoProps = Object.keys(pseudoProps).length ? Object.entries(pseudoProps).map(([pseudoKey, pseudoValue]) => {
      const pseudoStyle = all(pseudoValue);
      return {
        key: normalizePseudo(pseudoKey),
        base: pseudoStyle.base,
        responsive: pseudoStyle.media
      };
    }) : [];
    this.style = {
      base: all(styledProps).base,
      responsive: all(styledProps).media,
      pseudo: convertedPseudoProps
    };
    this.className = StyleGenerator.getClassNamePrefix(isDynamic) + generateHash(JSON.stringify(this.style));
  }
  static getClassNamePrefix(isDynamic = false) {
    const isProduction2 = false;
    if (isProduction2)
      return "kuma-";
    return isDynamic ? "🦄-" : "🐻-";
  }
  getClassName() {
    return this.className;
  }
  getCSS() {
    if (!this.style) {
      return "";
    }
    let css2 = `.${this.className} { ${this.style.base} }`;
    for (const [breakpoint, cssValue] of Object.entries(
      this.style.responsive
    )) {
      css2 += `@media (min-width: ${breakpoint}) { .${this.className} { ${cssValue} } }`;
    }
    for (const pseudo of this.style.pseudo) {
      css2 += `.${this.className}${pseudo.key} { ${pseudo.base} }`;
      for (const [breakpoint, cssValue] of Object.entries(pseudo.responsive)) {
        css2 += `@media (min-width: ${breakpoint}) { .${this.className}${pseudo.key} { ${cssValue} } }`;
      }
    }
    return css2;
  }
  getStyle() {
    return { css: this.getCSS(), className: this.getClassName() };
  }
};
var all = consumeStyleProps;

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/utils/stableStringify.mjs
function stableStringify(data) {
  const seen = [];
  return function stringify2(node) {
    if (node && node.toJSON && typeof node.toJSON === "function") {
      node = node.toJSON();
    }
    if (node === void 0)
      return;
    if (typeof node == "number")
      return isFinite(node) ? "" + node : "null";
    if (typeof node !== "object")
      return JSON.stringify(node);
    let i, out;
    if (Array.isArray(node)) {
      out = "[";
      for (i = 0; i < node.length; i++) {
        if (i)
          out += ",";
        out += stringify2(node[i]) || "null";
      }
      return out + "]";
    }
    if (node === null)
      return "null";
    if (seen.indexOf(node) !== -1) {
      throw new TypeError("Converting circular structure to JSON");
    }
    const seenIndex = seen.push(node) - 1;
    const keys = Object.keys(node).sort();
    out = "";
    for (i = 0; i < keys.length; i++) {
      const key = keys[i];
      const value = stringify2(node[key]);
      if (!value)
        continue;
      if (out)
        out += ",";
      out += JSON.stringify(key) + ":" + value;
    }
    seen.splice(seenIndex, 1);
    return "{" + out + "}";
  }(data);
}

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Box/react/utils.mjs
function isDynamicProp(key) {
  if (isStyledProp(key) || isPseudoProps(key) || key === "variant") {
    return true;
  }
  return false;
}
function hasDynamicProps(props) {
  return Object.keys(props).some((key) => {
    if (isDynamicProp(key) && props[key] != null) {
      return true;
    }
    return false;
  });
}
function extractDynamicProps(props) {
  const dynamicProps = {};
  const restProps = {};
  Object.entries(props).forEach(([key, prop]) => {
    if (isDynamicProp(key)) {
      dynamicProps[key] = prop;
      return;
    }
    restProps[key] = prop;
  });
  return {
    dynamicProps,
    restProps
  };
}
var styleCache2 = {};
function getCachedStyle(dynamicProps) {
  const key = stableStringify(dynamicProps);
  let generatedStyle = styleCache2[key];
  if (!generatedStyle) {
    generatedStyle = new StyleGenerator(dynamicProps, true).getStyle();
    styleCache2[key] = generatedStyle;
  }
  return generatedStyle;
}

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/forwardRef.mjs
var import_react3 = __toESM(require_react(), 1);
function forwardRef(component) {
  return (0, import_react3.forwardRef)(component);
}

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Box/react/DynamicBox.mjs
var defaultRegistry = createStyleRegistry();
var useInsertionEffect = import_react4.default.useInsertionEffect || import_react4.default.useLayoutEffect;
var DynamicBox = forwardRef(
  ({ as: Component = "div", children, variant, IS_KUMA_DEFAULT, ...props }, ref) => {
    const registry = useStyleRegistry() || defaultRegistry;
    const variantStyle = (() => {
      var _a2, _b;
      if (!variant)
        return {};
      if (!!IS_KUMA_DEFAULT)
        return {};
      return (_b = (_a2 = theme.getVariants("Box")) == null ? void 0 : _a2.variants) == null ? void 0 : _b[variant];
    })();
    const { dynamicProps, restProps } = extractDynamicProps({
      ...variantStyle,
      ...props
    });
    const { className, css: css2 } = getCachedStyle(dynamicProps);
    const box = import_react4.default.createElement(
      Component,
      {
        ref,
        ...restProps,
        className: [restProps.className, className].filter(Boolean).join(" ")
      },
      children
    );
    if (!isBrowser) {
      registry.add(className, css2);
      return box;
    }
    useInsertionEffect(() => {
      registry.add(className, css2);
      return () => {
        registry.remove(className);
      };
    }, [className, css2]);
    return box;
  }
);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Box/react/StaticBox.mjs
var import_react5 = __toESM(require_react(), 1);
var StaticBox = forwardRef(
  ({ as: Component = "div", children, IS_KUMA_DEFAULT, ...props }, ref) => import_react5.default.createElement(Component, { ref, ...props }, children)
);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Box/react/index.mjs
var Box = forwardRef(({ children, ...props }, ref) => {
  if (hasDynamicProps(props)) {
    return import_react6.default.createElement(DynamicBox, { ref, ...props }, children);
  }
  return import_react6.default.createElement(StaticBox, { ref, ...props }, children);
});

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Flex/react.mjs
var import_react7 = __toESM(require_react(), 1);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Flex/handler.mjs
var defaultFlexTag = "div";

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Flex/react.mjs
var Flex = forwardRef(
  ({ as: Component = defaultFlexTag, children, ...props }, ref) => {
    var _a2, _b;
    const variant = props.variant ? (_b = (_a2 = theme.getVariants("Flex")) == null ? void 0 : _a2.variants) == null ? void 0 : _b[props.variant] : {};
    return import_react7.default.createElement(
      Box,
      {
        as: Component,
        ref,
        ...variant,
        ...props,
        children,
        IS_KUMA_DEFAULT: true
      }
    );
  }
);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Spacer/react.mjs
var import_react8 = __toESM(require_react(), 1);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Spacer/handler.mjs
var defaultSpacerTag = "div";
var spacerHandler = (props) => {
  if (!props.horizontal && !props.size)
    return {};
  const px = typeof props.size === "undefined" ? "0px" : toCssUnit("width", props.size);
  return props.horizontal ? {
    width: px,
    height: "auto",
    display: "inline-block",
    flexShrink: 0
  } : { width: "auto", height: px, display: "block", flexShrink: 0 };
};

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Spacer/react.mjs
var Spacer = forwardRef(
  ({ as: Component = defaultSpacerTag, children, size, horizontal, ...props }, ref) => {
    var _a2, _b;
    props = {
      ...spacerHandler({ size, horizontal }),
      ...props
    };
    const variant = props.variant ? (_b = (_a2 = theme.getVariants("Spacer")) == null ? void 0 : _a2.variants) == null ? void 0 : _b[props.variant] : {};
    return import_react8.default.createElement(
      Box,
      {
        as: Component,
        ref,
        ...variant,
        ...props,
        children,
        IS_KUMA_DEFAULT: true
      }
    );
  }
);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Text/react.mjs
var import_react9 = __toESM(require_react(), 1);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Text/handler.mjs
var defaultTextTag = "p";

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Text/react.mjs
var Text = forwardRef(
  ({ as: Component = defaultTextTag, children, ...props }, ref) => {
    var _a2, _b;
    const variant = props.variant ? (_b = (_a2 = theme.getVariants("Text")) == null ? void 0 : _a2.variants) == null ? void 0 : _b[props.variant] : {};
    return import_react9.default.createElement(
      Box,
      {
        as: Component,
        ref,
        ...variant,
        ...props,
        children,
        IS_KUMA_DEFAULT: true
      }
    );
  }
);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Button/react.mjs
var import_react10 = __toESM(require_react(), 1);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Button/handler.mjs
var defaultButtonTag = "button";

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Button/react.mjs
var Button = forwardRef(
  ({ as: Component = defaultButtonTag, children, ...props }, ref) => {
    var _a2, _b;
    const variant = props.variant ? (_b = (_a2 = theme.getVariants("Button")) == null ? void 0 : _a2.variants) == null ? void 0 : _b[props.variant] : {};
    return import_react10.default.createElement(
      Box,
      {
        as: Component,
        ref,
        ...variant,
        ...props,
        children,
        IS_KUMA_DEFAULT: true
      }
    );
  }
);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Heading/react.mjs
var import_react11 = __toESM(require_react(), 1);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Heading/handler.mjs
var defaultHeadingTag = "h1";

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Heading/react.mjs
var Heading = forwardRef(
  ({ as: Component = defaultHeadingTag, children, ...props }, ref) => {
    var _a2, _b;
    const variant = props.variant ? (
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any -- FIXME
      (_b = (_a2 = theme.getVariants("Heading")) == null ? void 0 : _a2.variants) == null ? void 0 : _b[props.variant]
    ) : {};
    return import_react11.default.createElement(
      Box,
      {
        as: Component,
        ref,
        ...variant,
        ...props,
        children,
        IS_KUMA_DEFAULT: true
      }
    );
  }
);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Select/react.mjs
var import_react12 = __toESM(require_react(), 1);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Select/handler.mjs
var defaultSelectTag = "select";

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Select/react.mjs
var Select = forwardRef(
  ({ as: Component = defaultSelectTag, children, ...props }, ref) => {
    var _a2, _b;
    const variantStyle = props.variant ? (_b = (_a2 = theme.getVariants("Select")) == null ? void 0 : _a2.variants) == null ? void 0 : _b[props.variant] : {};
    return import_react12.default.createElement(
      Box,
      {
        as: Component,
        ref,
        ...variantStyle,
        ...props,
        children,
        IS_KUMA_DEFAULT: true
      }
    );
  }
);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Input/react.mjs
var import_react13 = __toESM(require_react(), 1);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Input/handler.mjs
var defaultInputTag = "input";

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Input/react.mjs
var Input = forwardRef(
  ({ as: Component = defaultInputTag, children, ...props }, ref) => {
    var _a2, _b;
    const variantStyle = props.variant ? (_b = (_a2 = theme.getVariants("Input")) == null ? void 0 : _a2.variants) == null ? void 0 : _b[props.variant] : {};
    return import_react13.default.createElement(
      Box,
      {
        as: Component,
        ref,
        ...variantStyle,
        ...props,
        children,
        IS_KUMA_DEFAULT: true
      }
    );
  }
);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/HStack/react.mjs
var import_react14 = __toESM(require_react(), 1);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/HStack/handler.mjs
var defaultHStackTag = "div";

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/HStack/react.mjs
var HStack = forwardRef(
  ({ as: Component = defaultHStackTag, children, ...props }, ref) => {
    var _a2, _b;
    const variant = props.variant ? (_b = (_a2 = theme.getVariants("HStack")) == null ? void 0 : _a2.variants) == null ? void 0 : _b[props.variant] : {};
    return import_react14.default.createElement(
      Box,
      {
        as: Component,
        ref,
        ...variant,
        ...props,
        children,
        IS_KUMA_DEFAULT: true
      }
    );
  }
);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/VStack/react.mjs
var import_react15 = __toESM(require_react(), 1);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/VStack/handler.mjs
var defaultVStackTag = "div";

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/VStack/react.mjs
var VStack = forwardRef(
  ({ as: Component = defaultVStackTag, children, ...props }, ref) => {
    var _a2, _b;
    const variant = props.variant ? (_b = (_a2 = theme.getVariants("VStack")) == null ? void 0 : _a2.variants) == null ? void 0 : _b[props.variant] : {};
    return import_react15.default.createElement(
      Box,
      {
        as: Component,
        ref,
        ...variant,
        ...props,
        children,
        IS_KUMA_DEFAULT: true
      }
    );
  }
);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Image/react.mjs
var import_react16 = __toESM(require_react(), 1);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Image/handler.mjs
var defaultImageTag = "img";

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Image/react.mjs
var Image = forwardRef(
  ({ as: Component = defaultImageTag, children, ...props }, ref) => {
    var _a2, _b;
    const variant = props.variant ? (_b = (_a2 = theme.getVariants("Image")) == null ? void 0 : _a2.variants) == null ? void 0 : _b[props.variant] : {};
    return import_react16.default.createElement(
      Box,
      {
        as: Component,
        ref,
        ...variant,
        ...props,
        children,
        IS_KUMA_DEFAULT: true
      }
    );
  }
);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Link/react.mjs
var import_react17 = __toESM(require_react(), 1);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Link/handler.mjs
var defaultLinkTag = "a";

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Link/react.mjs
var Link = forwardRef(
  ({ as: Component = defaultLinkTag, children, ...props }, ref) => {
    var _a2, _b;
    const variant = props.variant ? (_b = (_a2 = theme.getVariants("Link")) == null ? void 0 : _a2.variants) == null ? void 0 : _b[props.variant] : {};
    return import_react17.default.createElement(
      Box,
      {
        as: Component,
        ref,
        ...variant,
        ...props,
        children,
        IS_KUMA_DEFAULT: true
      }
    );
  }
);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Grid/react.mjs
var import_react18 = __toESM(require_react(), 1);

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Grid/handler.mjs
var defaultGridTag = "div";

// node_modules/.pnpm/@kuma-ui+core@1.5.7_@types+react@18.3.1_react@18.3.1/node_modules/@kuma-ui/core/dist/components/Grid/react.mjs
var Grid = forwardRef(
  ({ as: Component = defaultGridTag, children, ...props }, ref) => {
    var _a2, _b;
    const variant = props.variant ? (_b = (_a2 = theme.getVariants("Grid")) == null ? void 0 : _a2.variants) == null ? void 0 : _b[props.variant] : {};
    return import_react18.default.createElement(
      Box,
      {
        as: Component,
        ref,
        ...variant,
        ...props,
        children,
        IS_KUMA_DEFAULT: true
      }
    );
  }
);
export {
  Box,
  Button,
  Flex,
  Grid,
  HStack,
  Heading,
  Image,
  Input,
  Link,
  Select,
  Spacer,
  StyleRegistry,
  Text,
  VStack,
  createStyleRegistry,
  createTheme,
  css,
  k,
  styled
};
//# sourceMappingURL=@kuma-ui_core.js.map
