type UnionToIntersection<U> = (U extends unknown ? (_: U) => void : never) extends (_: infer I) => void ? I : never;
type _String = string & {};
type Stringify<T> = T extends string ? T : _String;
type IsAny<T> = 0 extends 1 & T ? true : false;
type IsUnknown<T> = unknown extends T ? If<IsAny<T>, false, true> : false;
type IsNever<T> = [T] extends [never] ? true : false;
type If<Q extends boolean, T, F> = Q extends true ? T : F;

export { If, IsNever, IsUnknown, Stringify, UnionToIntersection, _String };
