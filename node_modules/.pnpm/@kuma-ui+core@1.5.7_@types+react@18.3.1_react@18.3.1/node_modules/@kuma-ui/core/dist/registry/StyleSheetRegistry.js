"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var StyleSheetRegistry_exports = {};
__export(StyleSheetRegistry_exports, {
  StyleSheetRegistry: () => StyleSheetRegistry
});
module.exports = __toCommonJS(StyleSheetRegistry_exports);
var import_react = __toESM(require("react"));
var import_stylis = require("stylis");
var import_StyleSheet = require("./sheet/StyleSheet");
var import_isBrowser = require("../utils/isBrowser");
var import_isProduction = require("../utils/isProduction");
const STYLE_ID_PREFIX = "__";
class StyleSheetRegistry {
  sheet;
  serverSideRenderedStyleMap = null;
  indexesMap = {};
  instancesCountMap = {};
  constructor() {
    this.sheet = new import_StyleSheet.StyleSheet("kuma-ui", import_isProduction.isProduction);
    this.sheet.inject();
  }
  add(id, css) {
    if (import_isBrowser.isBrowser && this.serverSideRenderedStyleMap === null) {
      this.serverSideRenderedStyleMap = this.getServerSideRenderedStyleMap();
      Object.keys(this.serverSideRenderedStyleMap).forEach((id2) => {
        this.instancesCountMap[id2] = 0;
      });
    }
    this.instancesCountMap[id] = 1 + (this.instancesCountMap[id] ?? 0);
    const serverSideRenderedStyle = this.serverSideRenderedStyleMap?.[id];
    if (this.instancesCountMap[id] === 1 && !serverSideRenderedStyle) {
      (0, import_stylis.compile)(css).forEach((element) => {
        const rule = (0, import_stylis.serialize)([element], import_stylis.stringify);
        this.indexesMap[id] = (this.indexesMap[id] || []).concat(
          this.sheet.insertRule(rule)
        );
      });
    }
  }
  remove(id) {
    if (this.instancesCountMap[id] === void 0) {
      throw new Error(
        `StyleSheetRegistry: id: \`${id}\` not found in idInstancesCountMap.`
      );
    }
    this.instancesCountMap[id] -= 1;
    if (this.instancesCountMap[id] !== 0) {
      return;
    }
    const serverSideRenderedStyle = this.serverSideRenderedStyleMap?.[id];
    if (serverSideRenderedStyle) {
      serverSideRenderedStyle.remove();
      delete this.serverSideRenderedStyleMap?.[id];
    } else {
      if (this.indexesMap[id] === void 0) {
        throw new Error(
          `StyleSheetRegistry: id: \`${id}\` not found in idIndexesMap.`
        );
      }
      this.indexesMap[id].forEach((index) => this.sheet.deleteRule(index));
      delete this.indexesMap[id];
    }
    delete this.instancesCountMap[id];
  }
  styles(options = {}) {
    return Object.keys(this.indexesMap).map((id) => {
      const indexes = this.indexesMap[id];
      if (indexes === void 0) {
        return null;
      }
      const cssRules = this.sheet.cssRules();
      const css = indexes.map((index) => cssRules[index]?.cssText).filter(Boolean).join(this.sheet.isSpeedy() ? "" : "\n");
      if (css.length === 0) {
        return null;
      }
      return import_react.default.createElement("style", {
        id: `${STYLE_ID_PREFIX}${id}`,
        key: `${STYLE_ID_PREFIX}${id}`,
        nonce: options.nonce ? options.nonce : void 0,
        dangerouslySetInnerHTML: {
          __html: css
        }
      });
    }).filter(Boolean);
  }
  flush() {
    this.sheet.flush();
    this.sheet.inject();
    this.serverSideRenderedStyleMap = null;
    this.indexesMap = {};
    this.instancesCountMap = {};
  }
  getServerSideRenderedStyleMap() {
    const elements = Array.from(
      document.querySelectorAll(`[id^="${STYLE_ID_PREFIX}"]`)
    );
    return elements.reduce(
      (styles, element) => {
        const id = element.id.replace(STYLE_ID_PREFIX, "");
        styles[id] = element;
        return styles;
      },
      {}
    );
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  StyleSheetRegistry
});
