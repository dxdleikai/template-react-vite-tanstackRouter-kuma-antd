// src/registry/StyleSheetRegistry.ts
import React from "react";
import { compile, serialize, stringify } from "stylis";
import { StyleSheet } from "./sheet/StyleSheet.mjs";
import { isBrowser } from "../utils/isBrowser.mjs";
import { isProduction } from "../utils/isProduction.mjs";
var STYLE_ID_PREFIX = "__";
var StyleSheetRegistry = class {
  sheet;
  serverSideRenderedStyleMap = null;
  indexesMap = {};
  instancesCountMap = {};
  constructor() {
    this.sheet = new StyleSheet("kuma-ui", isProduction);
    this.sheet.inject();
  }
  add(id, css) {
    if (isBrowser && this.serverSideRenderedStyleMap === null) {
      this.serverSideRenderedStyleMap = this.getServerSideRenderedStyleMap();
      Object.keys(this.serverSideRenderedStyleMap).forEach((id2) => {
        this.instancesCountMap[id2] = 0;
      });
    }
    this.instancesCountMap[id] = 1 + (this.instancesCountMap[id] ?? 0);
    const serverSideRenderedStyle = this.serverSideRenderedStyleMap?.[id];
    if (this.instancesCountMap[id] === 1 && !serverSideRenderedStyle) {
      compile(css).forEach((element) => {
        const rule = serialize([element], stringify);
        this.indexesMap[id] = (this.indexesMap[id] || []).concat(
          this.sheet.insertRule(rule)
        );
      });
    }
  }
  remove(id) {
    if (this.instancesCountMap[id] === void 0) {
      throw new Error(
        `StyleSheetRegistry: id: \`${id}\` not found in idInstancesCountMap.`
      );
    }
    this.instancesCountMap[id] -= 1;
    if (this.instancesCountMap[id] !== 0) {
      return;
    }
    const serverSideRenderedStyle = this.serverSideRenderedStyleMap?.[id];
    if (serverSideRenderedStyle) {
      serverSideRenderedStyle.remove();
      delete this.serverSideRenderedStyleMap?.[id];
    } else {
      if (this.indexesMap[id] === void 0) {
        throw new Error(
          `StyleSheetRegistry: id: \`${id}\` not found in idIndexesMap.`
        );
      }
      this.indexesMap[id].forEach((index) => this.sheet.deleteRule(index));
      delete this.indexesMap[id];
    }
    delete this.instancesCountMap[id];
  }
  styles(options = {}) {
    return Object.keys(this.indexesMap).map((id) => {
      const indexes = this.indexesMap[id];
      if (indexes === void 0) {
        return null;
      }
      const cssRules = this.sheet.cssRules();
      const css = indexes.map((index) => cssRules[index]?.cssText).filter(Boolean).join(this.sheet.isSpeedy() ? "" : "\n");
      if (css.length === 0) {
        return null;
      }
      return React.createElement("style", {
        id: `${STYLE_ID_PREFIX}${id}`,
        key: `${STYLE_ID_PREFIX}${id}`,
        nonce: options.nonce ? options.nonce : void 0,
        dangerouslySetInnerHTML: {
          __html: css
        }
      });
    }).filter(Boolean);
  }
  flush() {
    this.sheet.flush();
    this.sheet.inject();
    this.serverSideRenderedStyleMap = null;
    this.indexesMap = {};
    this.instancesCountMap = {};
  }
  getServerSideRenderedStyleMap() {
    const elements = Array.from(
      document.querySelectorAll(`[id^="${STYLE_ID_PREFIX}"]`)
    );
    return elements.reduce(
      (styles, element) => {
        const id = element.id.replace(STYLE_ID_PREFIX, "");
        styles[id] = element;
        return styles;
      },
      {}
    );
  }
};
export {
  StyleSheetRegistry
};
