"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ServerStyleSheet_exports = {};
__export(ServerStyleSheet_exports, {
  ServerStyleSheet: () => ServerStyleSheet
});
module.exports = __toCommonJS(ServerStyleSheet_exports);
class ServerStyleSheet {
  name;
  deletedRulePlaceholder;
  speedy;
  serverSheet;
  injected;
  rulesCount;
  constructor(name, speedy = false) {
    this.name = name;
    this.deletedRulePlaceholder = `#${name}-deleted-rule{}`;
    this.speedy = speedy;
    this.serverSheet = void 0;
    this.injected = false;
    this.rulesCount = 0;
  }
  inject() {
    if (this.injected) {
      throw new Error("ServerStyleSheet: sheet already injected");
    }
    this.serverSheet = {
      cssRules: [],
      insertRule: (rule, index) => {
        if (typeof index === "number") {
          this.getSheet().cssRules[index] = { cssText: rule };
          return index;
        }
        this.getSheet().cssRules.push({ cssText: rule });
        return this.getSheet().cssRules.length - 1;
      },
      deleteRule: (index) => {
        delete this.getSheet().cssRules[index];
      }
    };
    this.injected = true;
  }
  setSpeedy(bool) {
    if (this.rulesCount === 0) {
      throw new Error(
        "ServerStyleSheet: speedy cannot be when rules have already been inserted"
      );
    }
    this.flush();
    this.speedy = bool;
    this.inject();
  }
  isSpeedy() {
    return this.speedy;
  }
  insertRule(rule, index) {
    if (typeof index !== "number") {
      index = this.getSheet().cssRules.length;
    }
    this.getSheet().insertRule(rule, index);
    return this.rulesCount++;
  }
  deleteRule(index) {
    if (index < 0) {
      return;
    }
    const sheet = this.getSheet();
    sheet.deleteRule(index);
    sheet.insertRule(this.deletedRulePlaceholder, index);
  }
  flush() {
    this.injected = false;
    this.rulesCount = 0;
    this.getSheet().cssRules = [];
  }
  cssRules() {
    return this.getSheet().cssRules;
  }
  getSheet() {
    if (!this.serverSheet) {
      throw new Error("ServerStyleSheet: sheet not injected");
    }
    return this.serverSheet;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ServerStyleSheet
});
