import { a as ThemeSystem, R as RawThemeInput } from '../theme-bbd95c64.js';
import { componentList } from './componentList.js';
import { StyledProps, PseudoProps } from '@kuma-ui/system';
import { ReactNode } from 'react';
import { If, IsUnknown } from '../utils/types.js';
import '../utils/object.js';
import '@kuma-ui/sheet';

type As<Props = any> = React.ElementType<Props>;
type PropsOf<T extends As> = React.ComponentPropsWithoutRef<T> & {
    as?: As;
};
type ComponentWithAs<Component extends As, Props extends object = {}> = {
    <AsComponent extends As = Component>(props: MergeWithAs<React.ComponentProps<Component>, React.ComponentProps<AsComponent>, Props, AsComponent>): JSX.Element;
    displayName?: string;
    propTypes?: React.WeakValidationMap<any>;
    contextTypes?: React.ValidationMap<any>;
    defaultProps?: Partial<any>;
    id?: string;
};
type MergeWithAs<ComponentProps extends object, AsProps extends object, AdditionalProps extends object = {}, AsComponent extends As = As> = RightJoinProps<RightJoinProps<ComponentProps, AdditionalProps>, RightJoinProps<AsProps, AdditionalProps> & {
    as?: AsComponent;
}>;
type RightJoinProps<SourceProps extends object = {}, OverrideProps extends object = {}> = OmitCommonProps<SourceProps, keyof OverrideProps> & OverrideProps;
type OmitCommonProps<Target, OmitAdditionalProps extends keyof any = never> = Omit<Target, "transition" | "as" | "color" | OmitAdditionalProps>;
type Variants<T, ComponentType extends keyof typeof componentList> = T extends Required<Required<RawThemeInput>["components"]>[ComponentType] ? NonNullable<T["variants"]> : never;
type Variant<ComponentType extends keyof typeof componentList> = If<IsUnknown<ThemeSystem["components"][ComponentType]>, never, Extract<keyof Variants<ThemeSystem["components"][ComponentType], ComponentType>, string>>;
type ComponentProps<ComponentType extends keyof typeof componentList> = StyledProps<ThemeSystem> & Partial<PseudoProps<ThemeSystem>> & {
    children?: ReactNode;
} & {
    variant?: Variant<ComponentType>;
};

export { As, ComponentProps, ComponentWithAs, MergeWithAs, PropsOf, RightJoinProps };
