"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/optimizer/optimize.ts
var optimize_exports = {};
__export(optimize_exports, {
  optimize: () => optimize
});
module.exports = __toCommonJS(optimize_exports);
var import_componentList = require("@kuma-ui/core/components/componentList");
var import_ts_morph = require("ts-morph");
var import_system = require("@kuma-ui/system");
var optimize = (componentName, jsxElement, as) => {
  const isOptimizable = jsxElement.getAttributes().every((attrLike) => {
    if (import_ts_morph.Node.isJsxSpreadAttribute(attrLike))
      return false;
    const attr = attrLike.asKindOrThrow(import_ts_morph.SyntaxKind.JsxAttribute);
    if (hasDynamicProp(attr.getNameNode().getText().trim(), !!as))
      return false;
    return true;
  });
  if (!isOptimizable)
    return;
  const rawHTMLTag = (() => {
    const safeAs = typeof as === "string" ? as.replace(/['"`]/g, "") : as;
    const tag = import_componentList.defaultComponentTag[componentName];
    if (safeAs) {
      return safeAs;
    } else {
      if (typeof tag === "string")
        return tag;
      return "div";
    }
  })();
  safeReplaceTagName(jsxElement, rawHTMLTag);
};
function hasDynamicProp(key, hasAs) {
  return (0, import_system.isStyledProp)(key) || (0, import_system.isPseudoProps)(key) || key === "variant" || !hasAs && key === "as";
}
function safeReplaceTagName(jsxElement, newTagName) {
  const originalComponent = jsxElement.getTagNameNode().getText();
  try {
    if (import_ts_morph.Node.isJsxOpeningElement(jsxElement)) {
      const jsxElementParent = jsxElement.getParentIfKind(
        import_ts_morph.SyntaxKind.JsxElement
      );
      if (jsxElementParent) {
        jsxElementParent.getOpeningElement().getTagNameNode().replaceWithText(newTagName);
        jsxElementParent.getClosingElement().getTagNameNode().replaceWithText(newTagName);
      }
    } else if (import_ts_morph.Node.isJsxSelfClosingElement(jsxElement)) {
      jsxElement.getTagNameNode().replaceWithText(newTagName);
      jsxElement.getFirstDescendantByKind(import_ts_morph.SyntaxKind.Identifier)?.replaceWithText(newTagName);
    }
    jsxElement.getAttribute("as")?.remove();
    jsxElement.getAttribute("IS_KUMA_DEFAULT")?.remove();
  } catch {
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  optimize
});
