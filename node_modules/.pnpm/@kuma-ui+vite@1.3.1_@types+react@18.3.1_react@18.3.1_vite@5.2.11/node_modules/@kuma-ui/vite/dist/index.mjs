var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});

// src/index.ts
import { compileSync } from "@kuma-ui/compiler";
import path from "path";
import { buildSync } from "esbuild";
import _eval from "eval";
import { theme, sheet, generateHash } from "@kuma-ui/sheet";
import { readdirSync } from "fs";
function kumaUI(options) {
  const wasm = options?.wasm ?? false;
  let mode;
  const dir = readdirSync(".");
  let configPath;
  dir.forEach((filePath) => {
    if (filePath.startsWith("kuma.config."))
      configPath = filePath;
  });
  if (configPath) {
    const filename = path.join(process.cwd(), configPath);
    const result = buildSync({
      bundle: true,
      target: "es2017",
      write: false,
      platform: "node",
      format: typeof __require !== "undefined" ? "cjs" : "esm",
      absWorkingDir: process.cwd(),
      outfile: filename + ".out",
      entryPoints: [filename],
      logLevel: "silent"
    });
    const config = _eval(result.outputFiles[0].text, configPath);
    if (config.default) {
      theme.setUserTheme(config.default);
    }
  }
  const cssTable = [];
  const virtualModuleId = "virtual:kuma-ui";
  const userTheme = theme.getUserTheme();
  return {
    name: "kuma-ui",
    enforce: "pre",
    config(config) {
      if (!config.define)
        config.define = {};
      config.define = Object.assign(config.define, {
        "globalThis.__KUMA_USER_THEME__": JSON.stringify(userTheme)
      });
      return config;
    },
    transform(code, id) {
      if (id.includes("@kuma-ui"))
        return;
      if (!/\.(t|j)(s|sx)?$/.test(id))
        return;
      if (/node_modules/.test(id))
        return;
      if (!code.includes("@kuma-ui/core"))
        return;
      const result = compileSync({ code, id, wasm });
      if (!result?.code)
        return;
      const css = result.css;
      const cssPath = path.normalize(id.replace(/\.[jt]sx?$/, ""));
      const url = `${virtualModuleId}/${generateHash(
        path.dirname(cssPath)
      )}/${path.basename(cssPath)}-${generateHash(css)}.css`;
      cssTable.push({ url, css });
      sheet.reset();
      return `import "${url}";
` + result.code;
    },
    load(url) {
      if (!url.startsWith(`\0${virtualModuleId}`))
        return void 0;
      const urlContent = url.slice(`\0`.length);
      return cssTable.find((c) => c.url === urlContent)?.css ?? void 0;
    },
    resolveId(importeeUrl) {
      if (!importeeUrl.startsWith(virtualModuleId))
        return void 0;
      return `\0${importeeUrl}`;
    },
    handleHotUpdate() {
      cssTable.length = 0;
    },
    configResolved(config) {
      if (config.define && Object.keys(config.define).length > 0) {
        config.configFileDependencies.push(`${config.root}/kuma.config.ts`);
      }
      mode = config.command;
    }
  };
}
export {
  kumaUI as default
};
