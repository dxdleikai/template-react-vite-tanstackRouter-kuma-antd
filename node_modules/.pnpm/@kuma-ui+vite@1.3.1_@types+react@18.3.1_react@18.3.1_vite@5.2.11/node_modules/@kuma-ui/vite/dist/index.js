"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => kumaUI
});
module.exports = __toCommonJS(src_exports);
var import_compiler = require("@kuma-ui/compiler");
var import_path = __toESM(require("path"));
var import_esbuild = require("esbuild");
var import_eval = __toESM(require("eval"));
var import_sheet = require("@kuma-ui/sheet");
var import_fs = require("fs");
function kumaUI(options) {
  const wasm = options?.wasm ?? false;
  let mode;
  const dir = (0, import_fs.readdirSync)(".");
  let configPath;
  dir.forEach((filePath) => {
    if (filePath.startsWith("kuma.config."))
      configPath = filePath;
  });
  if (configPath) {
    const filename = import_path.default.join(process.cwd(), configPath);
    const result = (0, import_esbuild.buildSync)({
      bundle: true,
      target: "es2017",
      write: false,
      platform: "node",
      format: typeof require !== "undefined" ? "cjs" : "esm",
      absWorkingDir: process.cwd(),
      outfile: filename + ".out",
      entryPoints: [filename],
      logLevel: "silent"
    });
    const config = (0, import_eval.default)(result.outputFiles[0].text, configPath);
    if (config.default) {
      import_sheet.theme.setUserTheme(config.default);
    }
  }
  const cssTable = [];
  const virtualModuleId = "virtual:kuma-ui";
  const userTheme = import_sheet.theme.getUserTheme();
  return {
    name: "kuma-ui",
    enforce: "pre",
    config(config) {
      if (!config.define)
        config.define = {};
      config.define = Object.assign(config.define, {
        "globalThis.__KUMA_USER_THEME__": JSON.stringify(userTheme)
      });
      return config;
    },
    transform(code, id) {
      if (id.includes("@kuma-ui"))
        return;
      if (!/\.(t|j)(s|sx)?$/.test(id))
        return;
      if (/node_modules/.test(id))
        return;
      if (!code.includes("@kuma-ui/core"))
        return;
      const result = (0, import_compiler.compileSync)({ code, id, wasm });
      if (!result?.code)
        return;
      const css = result.css;
      const cssPath = import_path.default.normalize(id.replace(/\.[jt]sx?$/, ""));
      const url = `${virtualModuleId}/${(0, import_sheet.generateHash)(
        import_path.default.dirname(cssPath)
      )}/${import_path.default.basename(cssPath)}-${(0, import_sheet.generateHash)(css)}.css`;
      cssTable.push({ url, css });
      import_sheet.sheet.reset();
      return `import "${url}";
` + result.code;
    },
    load(url) {
      if (!url.startsWith(`\0${virtualModuleId}`))
        return void 0;
      const urlContent = url.slice(`\0`.length);
      return cssTable.find((c) => c.url === urlContent)?.css ?? void 0;
    },
    resolveId(importeeUrl) {
      if (!importeeUrl.startsWith(virtualModuleId))
        return void 0;
      return `\0${importeeUrl}`;
    },
    handleHotUpdate() {
      cssTable.length = 0;
    },
    configResolved(config) {
      if (config.define && Object.keys(config.define).length > 0) {
        config.configFileDependencies.push(`${config.root}/kuma.config.ts`);
      }
      mode = config.command;
    }
  };
}
