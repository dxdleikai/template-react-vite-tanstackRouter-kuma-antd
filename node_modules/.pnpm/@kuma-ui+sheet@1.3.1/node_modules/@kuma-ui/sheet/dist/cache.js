"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// src/cache.ts
var cache_exports = {};
__export(cache_exports, {
  styleCache: () => styleCache
});
module.exports = __toCommonJS(cache_exports);
var _StyleCache = class {
  cache;
  constructor() {
    this.cache = /* @__PURE__ */ new Map();
  }
  static getInstance() {
    if (!_StyleCache.instance) {
      _StyleCache.instance = new _StyleCache();
    }
    return _StyleCache.instance;
  }
  get(key) {
    return this.cache.get(key);
  }
  set(key, styles) {
    this.cache.set(key, styles);
  }
  reset() {
    this.cache.clear();
  }
};
var StyleCache = _StyleCache;
__publicField(StyleCache, "instance");
var styleCache = StyleCache.getInstance();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  styleCache
});
