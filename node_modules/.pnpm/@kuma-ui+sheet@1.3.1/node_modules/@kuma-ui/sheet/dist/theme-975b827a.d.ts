interface Placeholders {
    [key: string]: string;
}
declare const applyT: (input: string, placeholders: Placeholders) => string;
declare const applyPlaceholders: (input: string, placeholders: Placeholders) => string;
declare const createPlaceholders: (theme: Partial<UserTheme>) => Record<string, string>;

declare const defaultBreakpoints: Readonly<{
    sm: "576px";
    md: "768px";
    lg: "992px";
    xl: "1200px";
}>;
type ComponentName = "Box" | "Flex" | "Spacer" | "Text" | "Button" | "Heading" | "Input" | "Select" | "HStack" | "VStack" | "Image" | "Link" | "Grid";
declare const tokens: readonly ["colors", "fonts", "fontSizes", "fontWeights", "lineHeights", "letterSpacings", "spacings", "sizes", "radii", "zIndices", "breakpoints"];
type Tokens = (typeof tokens)[number];
type UserTheme = {
    [K in Tokens]?: Record<string, string> | undefined;
} & {
    components?: {
        [_ in ComponentName]?: {
            baseStyle?: any;
            variants?: {
                [key: string]: any;
            };
            defaultProps?: {
                variant?: string;
            } & Record<string, unknown>;
        };
    };
};
declare global {
    var __KUMA_USER_THEME__: UserTheme | undefined;
}
declare class Theme {
    private static instance;
    private _userTheme;
    private _placeholders;
    private constructor();
    static getInstance(): Theme;
    setUserTheme(userTheme: Partial<UserTheme>): void;
    getUserTheme(): UserTheme;
    getPlaceholders(): Placeholders;
    getVariants(componentName: ComponentName): {
        baseStyle?: any;
        variants?: {
            [key: string]: any;
        } | undefined;
        defaultProps?: {
            variant?: string;
        } & Record<string, unknown>;
    } | undefined;
    reset(): void;
}
declare const theme: Theme;

export { Placeholders as P, Tokens as T, UserTheme as U, applyT as a, applyPlaceholders as b, createPlaceholders as c, defaultBreakpoints as d, tokens as e, Theme as f, theme as t };
