"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// src/styleMap.ts
var styleMap_exports = {};
__export(styleMap_exports, {
  styleMap: () => styleMap
});
module.exports = __toCommonJS(styleMap_exports);
var _StyleMap = class {
  map;
  constructor() {
    this.map = /* @__PURE__ */ new Map();
  }
  static getInstance() {
    if (!_StyleMap.instance) {
      _StyleMap.instance = new _StyleMap();
    }
    return _StyleMap.instance;
  }
  // Add the given CSS for the specified file to the map.
  // In the future, we might use an id to associate the HTML tag
  // with the corresponding CSS (by using the data-kuma-ui attribute)
  // and improve performance by removing duplicate CSS across different files.
  set(fileName, css) {
    this.map.set(fileName, css);
  }
  get(fileName) {
    return this.map.get(fileName);
  }
  delete(fileName) {
    this.map.delete(fileName);
  }
  reset() {
    this.map.clear();
  }
};
var StyleMap = _StyleMap;
__publicField(StyleMap, "instance");
var styleMap = StyleMap.getInstance();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  styleMap
});
