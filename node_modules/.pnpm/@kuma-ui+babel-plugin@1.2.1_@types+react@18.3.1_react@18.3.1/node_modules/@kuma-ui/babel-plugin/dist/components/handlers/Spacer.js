"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/components/handlers/Spacer.ts
var Spacer_exports = {};
__export(Spacer_exports, {
  handleSpacer: () => handleSpacer
});
module.exports = __toCommonJS(Spacer_exports);
var import_core = require("@babel/core");
var handleSpacer = (path) => {
  const openingElement = path.node.openingElement;
  if (!import_core.types.isJSXIdentifier(openingElement.name, { name: "Spacer" }))
    return;
  let size;
  let horizontal;
  openingElement.attributes = openingElement.attributes.filter((attr) => {
    if (import_core.types.isJSXAttribute(attr)) {
      if (attr.name.name === "size") {
        size = attr;
        return false;
      } else if (attr.name.name === "horizontal") {
        horizontal = attr;
        return false;
      }
    }
    return true;
  });
  const displayValue = horizontal ? "inline-block" : "block";
  const display = openingElement.attributes.some(
    (attr) => import_core.types.isJSXAttribute(attr) && attr.name.name === "display"
  ) ? void 0 : import_core.types.jsxAttribute(import_core.types.jsxIdentifier("display"), import_core.types.stringLiteral(displayValue));
  const flexShrink = openingElement.attributes.some(
    (attr) => import_core.types.isJSXAttribute(attr) && attr.name.name === "flexShrink"
  ) ? void 0 : import_core.types.jsxAttribute(
    import_core.types.jsxIdentifier("flexShrink"),
    import_core.types.jSXExpressionContainer(import_core.types.numericLiteral(0))
  );
  let widthValue, heightValue;
  if (size && import_core.types.isJSXExpressionContainer(size.value)) {
    widthValue = horizontal ? size.value : import_core.types.jSXExpressionContainer(import_core.types.stringLiteral("auto"));
    heightValue = horizontal ? import_core.types.jSXExpressionContainer(import_core.types.stringLiteral("auto")) : size.value;
  } else {
    widthValue = horizontal ? import_core.types.jSXExpressionContainer(import_core.types.numericLiteral(0)) : import_core.types.jSXExpressionContainer(import_core.types.stringLiteral("auto"));
    heightValue = horizontal ? import_core.types.jSXExpressionContainer(import_core.types.stringLiteral("auto")) : import_core.types.jSXExpressionContainer(import_core.types.numericLiteral(0));
  }
  const width = openingElement.attributes.some(
    (attr) => import_core.types.isJSXAttribute(attr) && attr.name.name === "width"
  ) ? void 0 : import_core.types.jsxAttribute(import_core.types.jsxIdentifier("width"), widthValue);
  const height = openingElement.attributes.some(
    (attr) => import_core.types.isJSXAttribute(attr) && attr.name.name === "height"
  ) ? void 0 : import_core.types.jsxAttribute(import_core.types.jsxIdentifier("height"), heightValue);
  [display, flexShrink, width, height].forEach((attr) => {
    if (attr)
      openingElement.attributes.push(attr);
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handleSpacer
});
