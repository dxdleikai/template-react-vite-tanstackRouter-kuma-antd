import {
  extractStyleProps
} from "./chunk-ESZLASES.mjs";
import "./chunk-3RNQ3PIS.mjs";
import "./chunk-H6JCHQQL.mjs";

// src/processJSXHTMLTag.ts
import { types as t } from "@babel/core";
import { sheet } from "@kuma-ui/sheet";
import { all } from "@kuma-ui/system";
import { normalizePseudo } from "@kuma-ui/system";
var processJSXHTMLTag = (path) => {
  const { filteredAttributes, styledProps, pseudoProps } = extractStyleProps(path);
  path.node.attributes = filteredAttributes;
  if (Object.keys(styledProps).length > 0) {
    const convertedPseudoProps = Object.entries(
      pseudoProps
    ).map(([pseudoKey, pseudoValue]) => {
      const pseudoStyle = all(pseudoValue);
      return {
        key: normalizePseudo(pseudoKey),
        base: pseudoStyle.base,
        responsive: pseudoStyle.media
      };
    });
    const style = {
      base: all(styledProps).base,
      responsive: all(styledProps).media,
      pseudo: convertedPseudoProps
    };
    const generatedClassName = sheet.addRule(style);
    const generatedClassNameAttr = t.stringLiteral(generatedClassName);
    const classNameAttrs = [generatedClassNameAttr];
    const existsClassNameAttr = path.node.attributes.find(
      (attr) => t.isJSXAttribute(attr) && t.isJSXIdentifier(attr.name, { name: "className" })
    );
    if (existsClassNameAttr) {
      if (t.isStringLiteral(existsClassNameAttr.value)) {
        classNameAttrs.push(existsClassNameAttr.value);
      }
      if (t.isJSXExpressionContainer(existsClassNameAttr.value) && t.isExpression(existsClassNameAttr.value.expression)) {
        classNameAttrs.push(existsClassNameAttr.value.expression);
      }
    }
    if (existsClassNameAttr) {
      existsClassNameAttr.value = t.jSXExpressionContainer(
        t.callExpression(
          t.memberExpression(
            t.arrayExpression(classNameAttrs),
            t.identifier("join")
          ),
          [t.stringLiteral(" ")]
        )
      );
    } else {
      path.node.attributes.push(
        t.jsxAttribute(t.jsxIdentifier("className"), generatedClassNameAttr)
      );
    }
  }
};
export {
  processJSXHTMLTag
};
