"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);

// src/ensureReactImport.ts
function ensureReactImport(programPath, t3) {
  const reactImportDeclaration = t3.importDeclaration(
    [t3.importDefaultSpecifier(t3.identifier("__KUMA_REACT__"))],
    t3.stringLiteral("react")
  );
  programPath.unshiftContainer("body", reactImportDeclaration);
}

// src/collectImportedStyled.ts
function collectImportedStyled(path, t3) {
  const importedStyleFunctions = {};
  const importDeclarations = path.get("body").filter((node) => t3.isImportDeclaration(node.node));
  for (const importDeclaration of importDeclarations) {
    if (t3.isImportDeclaration(importDeclaration.node) && importDeclaration.node.source.value === "@kuma-ui/core") {
      for (const specifier of importDeclaration.node.specifiers) {
        if (t3.isImportSpecifier(specifier) && t3.isIdentifier(specifier.imported)) {
          importedStyleFunctions[specifier.imported.name] = specifier.local.name;
        }
      }
    }
  }
  return importedStyleFunctions;
}

// src/replaceKwithBox.ts
var replaceKwithBox = (node, t3, importedStyleFunctions) => {
  node.traverse({
    JSXElement(path) {
      const { openingElement, closingElement } = path.node;
      if (t3.isJSXMemberExpression(openingElement.name) && t3.isJSXIdentifier(openingElement.name.object, {
        name: importedStyleFunctions["k"]
      })) {
        if (closingElement && t3.isJSXMemberExpression(closingElement.name) && t3.isJSXIdentifier(closingElement.name.object, {
          name: importedStyleFunctions["k"]
        })) {
          closingElement.name = t3.jsxIdentifier(importedStyleFunctions["Box"]);
        }
        openingElement.attributes = [
          t3.jsxAttribute(
            t3.jsxIdentifier("as"),
            t3.stringLiteral(openingElement.name.property.name)
          ),
          t3.jsxAttribute(
            t3.jsxIdentifier("IS_KUMA_DEFAULT"),
            t3.jsxExpressionContainer(t3.booleanLiteral(true))
          ),
          ...openingElement.attributes
        ];
        openingElement.name = t3.jsxIdentifier(importedStyleFunctions["Box"]);
      }
    }
  });
};

// src/importBox.ts
var import_core = require("@babel/core");
function importBox(node, importedStyleFunctions) {
  let boxName = importedStyleFunctions["Box"];
  if (!boxName) {
    const localBoxName = "__Box";
    const reactImportDeclaration = import_core.types.importDeclaration(
      [import_core.types.importSpecifier(import_core.types.identifier(localBoxName), import_core.types.identifier("Box"))],
      import_core.types.stringLiteral("@kuma-ui/core")
    );
    node.unshiftContainer("body", reactImportDeclaration);
    boxName = localBoxName;
  }
  importedStyleFunctions["Box"] = boxName;
}

// src/hasCoreImportDeclaration.ts
var import_core2 = require("@babel/core");
function hasCoreImportDeclaration(path) {
  const importDeclarations = path.get("body").filter((node) => import_core2.types.isImportDeclaration(node.node));
  return importDeclarations.some(
    (importDeclaration) => import_core2.types.isImportDeclaration(importDeclaration.node) && importDeclaration.node.source.value === "@kuma-ui/core"
  );
}

// src/visitor.ts
var visitor = ({ types: t3, template: template2 }) => {
  let importedStyleFunctions = {};
  const visitor2 = {
    Program: {
      enter(path) {
        if (!hasCoreImportDeclaration(path)) {
          return;
        }
        ensureReactImport(path, t3);
        importedStyleFunctions = collectImportedStyled(path, t3);
        importBox(path, importedStyleFunctions);
        replaceKwithBox(path, t3, importedStyleFunctions);
      },
      exit() {
        this.file.metadata.bindings = importedStyleFunctions;
      }
    }
  };
  return visitor2;
};

// src/index.ts
var plugin = (core) => {
  return {
    name: "kuma-ui-plugin",
    manipulateOptions(opts, parserOpts) {
      const addPluginIfNotExists = (pluginName) => {
        if (
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call -- FIXME
          !parserOpts.plugins.some(
            (p) => (Array.isArray(p) ? p[0] : p) === pluginName
          )
        ) {
          parserOpts.plugins.push(pluginName);
        }
      };
      addPluginIfNotExists("jsx");
      addPluginIfNotExists("typescript");
    },
    visitor: visitor(core)
  };
};
var src_default = plugin;
