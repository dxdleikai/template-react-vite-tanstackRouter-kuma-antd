// src/components/handlers/Spacer.ts
import { types as t } from "@babel/core";
var handleSpacer = (path) => {
  const openingElement = path.node.openingElement;
  if (!t.isJSXIdentifier(openingElement.name, { name: "Spacer" }))
    return;
  let size;
  let horizontal;
  openingElement.attributes = openingElement.attributes.filter((attr) => {
    if (t.isJSXAttribute(attr)) {
      if (attr.name.name === "size") {
        size = attr;
        return false;
      } else if (attr.name.name === "horizontal") {
        horizontal = attr;
        return false;
      }
    }
    return true;
  });
  const displayValue = horizontal ? "inline-block" : "block";
  const display = openingElement.attributes.some(
    (attr) => t.isJSXAttribute(attr) && attr.name.name === "display"
  ) ? void 0 : t.jsxAttribute(t.jsxIdentifier("display"), t.stringLiteral(displayValue));
  const flexShrink = openingElement.attributes.some(
    (attr) => t.isJSXAttribute(attr) && attr.name.name === "flexShrink"
  ) ? void 0 : t.jsxAttribute(
    t.jsxIdentifier("flexShrink"),
    t.jSXExpressionContainer(t.numericLiteral(0))
  );
  let widthValue, heightValue;
  if (size && t.isJSXExpressionContainer(size.value)) {
    widthValue = horizontal ? size.value : t.jSXExpressionContainer(t.stringLiteral("auto"));
    heightValue = horizontal ? t.jSXExpressionContainer(t.stringLiteral("auto")) : size.value;
  } else {
    widthValue = horizontal ? t.jSXExpressionContainer(t.numericLiteral(0)) : t.jSXExpressionContainer(t.stringLiteral("auto"));
    heightValue = horizontal ? t.jSXExpressionContainer(t.stringLiteral("auto")) : t.jSXExpressionContainer(t.numericLiteral(0));
  }
  const width = openingElement.attributes.some(
    (attr) => t.isJSXAttribute(attr) && attr.name.name === "width"
  ) ? void 0 : t.jsxAttribute(t.jsxIdentifier("width"), widthValue);
  const height = openingElement.attributes.some(
    (attr) => t.isJSXAttribute(attr) && attr.name.name === "height"
  ) ? void 0 : t.jsxAttribute(t.jsxIdentifier("height"), heightValue);
  [display, flexShrink, width, height].forEach((attr) => {
    if (attr)
      openingElement.attributes.push(attr);
  });
};

export {
  handleSpacer
};
