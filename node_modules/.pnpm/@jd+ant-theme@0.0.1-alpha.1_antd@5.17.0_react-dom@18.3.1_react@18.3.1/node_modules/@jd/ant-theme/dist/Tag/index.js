function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import { getProps } from "../utils/PropsType";
import { ConfigProvider } from "./..";
import { Tag as AntTag } from 'antd';
import classNames from 'classnames';
import omit from 'lodash/omit';
import React from 'react';
/**
 * 继承ant tag,在此之上做扩充以及默认属性更改
 */
var InternalTag = function InternalTag(props, ref) {
  var _React$useContext = React.useContext(ConfigProvider.ConfigContext),
    getPrefixCls = _React$useContext.getPrefixCls;
  var prefixCls = getPrefixCls();
  var _props$size = props.size,
    size = _props$size === void 0 ? 'small' : _props$size,
    color = props.color;
  var wrapperProps = getProps(props, {
    className: classNames(size ? "".concat(prefixCls, "-tag-").concat(size) : '', color ? "".concat(prefixCls, "-tag-").concat(color) : ''),
    styleStart: color ? {
      border: "var(--ant-line-width) var(--ant-line-type) var(--ant-color-border)"
    } : {}
  }, ['size']);
  return /*#__PURE__*/React.createElement(AntTag, _extends({}, wrapperProps, {
    ref: ref
  }), props.children);
};
// 重写组件
var Tag = /*#__PURE__*/React.forwardRef(InternalTag);

// 合并内部方法
Object.assign(Tag, omit(AntTag, ['$$typeof', 'render']));
export default Tag;