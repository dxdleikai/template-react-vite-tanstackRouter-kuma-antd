/// <reference types="lodash" />
import type { CSSProperties, ReactElement } from 'react';
import React, { AriaAttributes } from 'react';
export type NativeProps<S extends string = never> = {
    /**
     * className，自定义组件支持了classnames解析，可以方便使用各种判断
     */
    className?: any;
    style?: CSSProperties & Partial<Record<S, string>>;
    [propName: string]: any;
} & AriaAttributes;
export type ExtendProps = {
    /**
     * className前面的classname，支持classnames方式渲染
     */
    classNameStart?: any;
    /**
     * className后面的classname，支持classnames方式渲染
     */
    classNameEnd?: any;
    className?: any;
    /**
     * style权重低
     */
    styleStart?: CSSProperties;
    /**
     * style权重高
     */
    styleEnd?: CSSProperties;
    [propsName: string]: any;
};
export declare function withNativeProps<P extends NativeProps>(props: P, element: ReactElement, extendProps?: ExtendProps): ReactElement<any, string | React.JSXElementConstructor<any>>;
/**
 * 过滤以及合并一些参数
 */
export declare const getProps: <P extends NativeProps<never>>(props: P, extendProps?: ExtendProps, arr?: string[], deep?: boolean) => import("lodash").Omit<{
    [x: string]: any;
    [x: number]: any;
} & P, string>;
export declare function attachPropertiesToComponent<C, P extends Record<string, any>>(component: C, properties: P): C & P;
