function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import classNames from 'classnames';
import merge from 'lodash/merge';
import omit from 'lodash/omit';
import React from 'react';
export function withNativeProps(props, element) {
  var extendProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var p = _objectSpread(_objectSpread({}, props), element.props);
  p.className = classNames(extendProps.classNameStart, element.props.className, props.className, extendProps.classNameEnd);
  p.style = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, extendProps.styleStart || {}), p.style || {}), props.style || {}), extendProps.styleEnd || {});
  if (props.tabIndex !== undefined) {
    p.tabIndex = props.tabIndex;
  }
  for (var key in props) {
    if (!props.hasOwnProperty(key)) continue;
    if (key.startsWith('data-') || key.startsWith('aria-')) {
      p[key] = props[key];
    }
  }
  // console.log(p.onScroll, 333333333333);
  return /*#__PURE__*/React.cloneElement(element, p);
}

/**
 * 过滤以及合并一些参数
 */
// 获取属性代码。
export var getProps = function getProps(props) {
  var extendProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var arr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var deep = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var p = function () {
    if (deep) {
      return merge(_objectSpread({}, omit(extendProps, ['classNameStart', 'classNameEnd', 'styleStart', 'styleEnd'])), props);
    }
    return _objectSpread(_objectSpread({}, omit(extendProps, ['classNameStart', 'classNameEnd', 'styleStart', 'styleEnd'])), props);
  }();
  p.className = classNames([extendProps.classNameStart, props.className, extendProps.className, extendProps.classNameEnd]);
  p.style = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, extendProps.styleStart || {}), props.style || {}), extendProps.style || {}), extendProps.styleEnd || {});
  if (Object.keys(p.className).length === 0) {
    delete p.className;
  }
  // @ts-ignore
  if (Object.keys(p.style).length === 0) {
    delete p.style;
  }
  if (deep) {
    return merge({}, omit(p, arr));
  } else {
    return omit(p, arr);
  }
};

// console.log();