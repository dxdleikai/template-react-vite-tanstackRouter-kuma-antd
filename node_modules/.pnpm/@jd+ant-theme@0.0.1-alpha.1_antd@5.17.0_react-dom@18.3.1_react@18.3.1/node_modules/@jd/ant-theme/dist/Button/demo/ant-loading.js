function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { PoweroffOutlined } from '@ant-design/icons';
import { Button, Flex } from "../..";
import React, { useState } from 'react';
var App = function App() {
  var _useState = useState([]),
    _useState2 = _slicedToArray(_useState, 2),
    loadings = _useState2[0],
    setLoadings = _useState2[1];
  var enterLoading = function enterLoading(index) {
    setLoadings(function (prevLoadings) {
      var newLoadings = _toConsumableArray(prevLoadings);
      newLoadings[index] = true;
      return newLoadings;
    });
    setTimeout(function () {
      setLoadings(function (prevLoadings) {
        var newLoadings = _toConsumableArray(prevLoadings);
        newLoadings[index] = false;
        return newLoadings;
      });
    }, 6000);
  };
  return /*#__PURE__*/React.createElement(Flex, {
    gap: "small",
    vertical: true
  }, /*#__PURE__*/React.createElement(Flex, {
    gap: "small",
    align: "center",
    wrap: "wrap"
  }, /*#__PURE__*/React.createElement(Button, {
    type: "primary",
    loading: true
  }, "Loading"), /*#__PURE__*/React.createElement(Button, {
    type: "primary",
    size: "small",
    loading: true
  }, "Loading"), /*#__PURE__*/React.createElement(Button, {
    type: "primary",
    icon: /*#__PURE__*/React.createElement(PoweroffOutlined, null),
    loading: true
  })), /*#__PURE__*/React.createElement(Flex, {
    gap: "small",
    wrap: "wrap"
  }, /*#__PURE__*/React.createElement(Button, {
    type: "primary",
    loading: loadings[0],
    onClick: function onClick() {
      return enterLoading(0);
    }
  }, "Click me!"), /*#__PURE__*/React.createElement(Button, {
    type: "primary",
    icon: /*#__PURE__*/React.createElement(PoweroffOutlined, null),
    loading: loadings[1],
    onClick: function onClick() {
      return enterLoading(1);
    }
  }, "Click me!"), /*#__PURE__*/React.createElement(Button, {
    type: "primary",
    icon: /*#__PURE__*/React.createElement(PoweroffOutlined, null),
    loading: loadings[2],
    onClick: function onClick() {
      return enterLoading(2);
    }
  })));
};
export default App;