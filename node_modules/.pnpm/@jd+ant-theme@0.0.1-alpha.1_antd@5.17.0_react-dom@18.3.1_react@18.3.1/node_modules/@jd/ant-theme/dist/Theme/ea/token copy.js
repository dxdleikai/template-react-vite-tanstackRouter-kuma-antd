function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var tokens = {
  borderRadius: 4,
  controlHeightSM: 28,
  white: '#FFFFFF',
  borderRadiusCard: 12
};
/**
 * 颜色变量集合，方便后续操作
 */
export var colorsVar = {
  neutral: {
    list: ["var(--ad-th, #f3f3f3)", '#e7e7e7', '#cecece', '#b6b6b6', '#9d9d9d', '#858585', '#6a6a6a', '#505050', '#353535', '#1b1b1b']
  },
  gray: {
    list: ['#f0f1f2', '#e1e3e6', '#c4c7cc', '#a6aab3', '#898e99', '#6b7280', '#565b66', '#40444d', '#2b2e33', '#15171a'],
    light: '#f8f8f9'
  },
  green: {
    list: ['#eaf8ec', '#d5f2da', '#ace4b4', '#82d78f', '#59c969', '#2fbc44', '#269636', '#1c7129', '#134b1b', '#09260e']
  },
  cyan: {
    list: ['#e8fafd', '#d1f5fb', '#a3ebf8', '#76e1f4', '#48d7f1', '#1acded', '#15a4be', '#107b8e', '#0a525f', '#05292f']
  },
  'sky-blue': {
    list: ['#eaf5fd', '#d4ecfb', '#a9d9f7', '#7ec5f2', '#53b2ee', '#289fea', '#207fbb', '#185f8c', '#10405e', '#08202f']
  },
  blue: {
    list: ['#e8f0fe', '#d1e1fd', '#a3c3fb', '#74a5f9', '#4687f7', '#1869f5', '#1354c4', '#0e3f93', '#0a2a62', '#051531']
  },
  indigo: {
    list: ['#edeffd', '#dbdffa', '#b7bff6', '#929ff1', '#6e7fed', '#4a5fe8', '#3b4cba', '#2c398b', '#1e265d', '#0f132e']
  },
  purple: {
    list: ['#f2eafe', '#e6d6fd', '#ccadfb', '#b383f9', '#995af7', '#8031f5', '#6627c4', '#4d1d93', '#331462', '#1a0a31']
  },
  fuchsia: {
    list: ['#f9ecfb', '#f3d8f8', '#e6b1f1', '#da8be9', '#cd64e2', '#c13ddb', '#9a31af', '#742583', '#4d1858', '#270c2c']
  },
  pink: {
    list: ['#feebf3', '#fdd7e8', '#fcafd0', '#fa86b9', '#f95ea1', '#f7368a', '#c62b6e', '#942053', '#631637', '#310b1c']
  },
  red: {
    list: ['#feebe8', '#fdd6d1', '#fbada3', '#fa8474', '#f85b46', '#f63218', '#c52813', '#941e0e', '#62140A', '#310A05']
  },
  orange: {
    list: ['#feeee8', '#fcdcd1', '#fabaa3', '#f79774', '#f95ea1', '#f25218', '#c24213', '#91310e', '#61210a', '#301005']
  },
  yellow: {
    list: ['#fff8ea', '#fef1d6', '#fde2ad', '#fdd483', '#fcc55a', '#fbb731', '#c99227', '#976e1d', '#644914', '#32250a']
  }
};
// primary 变量，可以查看token-variables文件
colorsVar.primary = _objectSpread(_objectSpread({}, colorsVar.red), {}, {
  prefix: ['sys-color']
});
// 成功色
colorsVar.success = _objectSpread(_objectSpread({}, colorsVar.green), {}, {
  prefix: ['sys-state']
});
// 告警色
colorsVar.warning = _objectSpread(_objectSpread({}, colorsVar.yellow), {}, {
  prefix: ['sys-state']
});
// error
colorsVar.error = _objectSpread(_objectSpread({}, colorsVar.red), {}, {
  prefix: ['sys-state']
});
// info
colorsVar.info = _objectSpread(_objectSpread({}, colorsVar['sky-blue']), {}, {
  prefix: ['sys-state']
});
// info
colorsVar.link = _objectSpread(_objectSpread({}, colorsVar['blue']), {}, {
  prefix: ['sys-state']
});
colorsVar.secondary = _objectSpread(_objectSpread({}, colorsVar.gray), {}, {
  prefix: ['sys-text', 'sys-color']
});
colorsVar.outline = {
  list: function () {
    var arr = _toConsumableArray(colorsVar.gray.list);
    arr[1] = '#dcdee0';
    return arr;
  }(),
  prefix: ['sys-surface']
};
colorsVar.surface = {
  list: ['#F8F8F9', '#EBECEE', '#E1E3E6'],
  prefix: ['sys-surface']
};
var cssVar = {};
// 循环渲染变量
Object.keys(colorsVar).forEach(function (e) {
  var current = colorsVar[e];
  var prefixArr = (current === null || current === void 0 ? void 0 : current.prefix) || ['colors'];
  prefixArr.forEach(function (prefix) {
    var name = "".concat(prefix, "-").concat(e);
    current.list.forEach(function (itemValue, index) {
      var item = itemValue.toUpperCase();
      var currentIndex = (index + 1) * 100;
      tokens["".concat(name, "-").concat(currentIndex)] = item;
      cssVar["--".concat(name, "-").concat(currentIndex)] = "var(--ant-".concat(name, "-").concat(currentIndex, ",").concat(item, ")");
    });
    tokens[name] = tokens["".concat(name, "-600")];
    cssVar["--".concat(name)] = "var(--ant-".concat(name, ", ").concat(tokens[name], ")");
    // 如果有浅色，给出50
    if (current !== null && current !== void 0 && current.light) {
      tokens["".concat(name, "-50")] = current.light;
      cssVar["--".concat(name, "-50")] = "var(--ant-".concat(name, "-50, ").concat(current.light, ")");
    }
  });
});
tokens['sys-surface-outline-006'] = 'rgba(0, 0, 0, 0.06)';
tokens['sys-surface-surface-white'] = '#FFFFFF';
// 散点的变量设置
var scatteredCssVar = {
  'sys-surface-outline-006': 'sys-surface-outline-006',
  'sys-surface-surface-white': 'sys-surface-surface-white',
  'sys-text-primary': 'colors-neutral-1000',
  colorText: 'colors-neutral-1000',
  'sys-text-secondary': 'colors-neutral-700',
  colorSecondary: 'colors-neutral-700',
  'sys-text-tertiary': 'colors-neutral-500',
  colorTertiary: 'colors-neutral-500',
  'sys-text-disable': 'colors-neutral-300',
  colorTextDisable: 'colors-neutral-300',
  'sys-text-disabled': 'colors-neutral-300',
  colorTextDisabled: 'colors-neutral-300',
  'sys-text-anti': 'white',
  colorTextAnti: 'white',
  colorPrimary: 'sys-color-primary',
  colorPrimaryHover: 'sys-color-primary-500',
  colorPrimaryActive: 'sys-color-primary-700',
  colorLink: 'sys-state-link',
  colorLinkHover: 'sys-state-link-500',
  colorLinkActive: 'sys-state-link-700',
  colorInfo: 'sys-state-info',
  colorWarning: 'sys-state-warning',
  colorError: 'sys-state-error',
  // 分割线
  colorSplit: 'sys-surface-outline-006',
  // 默认页面背景色
  'bg-page': '#F4F5F6',
  'sys-background-main': '#F9F9F9'
};
Object.keys(scatteredCssVar).forEach(function (e) {
  var current = scatteredCssVar[e];
  tokens[e] = tokens[current] || current;
  if (e.includes('-')) {
    cssVar["--".concat(e)] = "var(--ant-".concat(current, ", ").concat(tokens[e], ")");
  }
});

// console.log(cssVar, 88888888888);

// border
tokens.colorBorder = tokens['sys-surface-outline-200'];
// tokens.colorBorder2 = '#DCDEE0';
// tokens.colorBorder3 = tokens['colors-gray-300'];
// tokens.colorBorder06 = 'rgba(0, 0, 0, 0.06)';

// // bg
// tokens.colorBgTextHover = tokens['colors-gray-100'];
// tokens.colorBgTextActive = tokens['colors-gray-200'];
// tokens.bg = tokens['colors-gray-500'];
// tokens.bg2 = '#EBECEE';
// tokens.bg3 = tokens['colors-gray-200'];

// shadow
tokens['shadow-mini'] = "0px 1px 3px rgba(0, 0, 0, 0.06),\n0px 2px 6px rgba(0, 0, 0, 0.04)";
tokens['shadow-low'] = "0px 4px 6px rgba(0, 0, 0, 0.06),\n0px 2px 12px rgba(0, 0, 0, 0.04)";
tokens['shadow-middle'] = "0px 12px 24px -4px rgba(0, 0, 0, 0.06),\n0px 4px 28px rgba(0, 0, 0, 0.04)";
tokens['shadow-middle'] = "0px 12px 24px -4px rgba(0, 0, 0, 0.06),\n0px 4px 28px rgba(0, 0, 0, 0.04)";
tokens['shadow-high'] = "0px 20px 35px -6px rgba(0, 0, 0, 0.06),\n0px 8px 56px -2px rgba(0, 0, 0, 0.04)";

// 字体设置
tokens['fontFamily'] = "JDZhengHei, PingFang SC, Microsoft Yahei, Lantinghei SC,\nHiragino Sans GB, 'Microsoft Sans Serif', WenQuanYi Micro Hei, sans";

// 边框颜色
tokens['colorBorderSecondary'] = tokens['sys-surface-outline-006'];
tokens['sys-surface-surface-red'] = '#FFF5F4';

// 字体大小
tokens['fontSizeLG'] = 14;

// size 大小
tokens['controlHeightSM'] = 28;
tokens['controlHeight'] = 32;
tokens['controlHeightLG'] = 40;
// tokens['colorPrimaryActive'] = 'blue';
// tokens["colorPrimaryHover"]
// tokens["colorPrimary"]

// placeholder
tokens['colorTextPlaceholder'] = tokens['colors-neutral-400'];
export default tokens;
tokens['lineHeightXL'] = 24;
tokens['colorBgContainerDisabled'] = tokens['sys-surface-surface-100'];

// padding
tokens['paddingXS'] = 6;
// console.log(tokens, 88888888);
export var formTokens = {
  activeBorderColor: tokens['colors-neutral-1000'],
  hoverBorderColor: tokens['colors-neutral-1000'],
  addonBg: '#fff',
  inputFontSizeLG: 16,
  inputFontSizeXL: 16,
  // activeShadow: '0 0 0 2px rgba(30,42,59,.2)',
  activeShadow: 'none',
  paddingInlineLG: 13,
  paddingInlineSM: 11,
  paddingInlineXL: 15,
  // paddingBlockXL: 13,
  // paddingBlockSM: 6,
  // paddingBlock: 8,
  // paddingBlockLG: 7,
  paddingBlockXL: 0,
  paddingBlockSM: 0,
  paddingBlock: 0,
  paddingBlockLG: 0
};