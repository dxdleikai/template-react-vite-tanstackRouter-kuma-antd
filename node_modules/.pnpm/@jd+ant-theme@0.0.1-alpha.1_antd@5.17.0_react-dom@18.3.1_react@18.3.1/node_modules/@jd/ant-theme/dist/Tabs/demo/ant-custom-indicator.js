function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { Segmented, Tabs } from "../..";
import React from 'react';
var onChange = function onChange(key) {
  console.log(key);
};
var items = [{
  key: '1',
  label: 'Tab 1',
  children: 'Content of Tab Pane 1'
}, {
  key: '2',
  label: 'Tab 2',
  children: 'Content of Tab Pane 2'
}, {
  key: '3',
  label: 'Tab 3',
  children: 'Content of Tab Pane 3'
}];
var App = function App() {
  var _React$useState = React.useState('center'),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    alignValue = _React$useState2[0],
    setAlignValue = _React$useState2[1];
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Segmented, {
    defaultValue: "center",
    style: {
      marginBottom: 8
    },
    onChange: function onChange(value) {
      return setAlignValue(value);
    },
    options: ['start', 'center', 'end']
  }), /*#__PURE__*/React.createElement(Tabs, {
    defaultActiveKey: "1",
    items: items,
    onChange: onChange,
    indicator: {
      size: function size(origin) {
        return origin - 20;
      },
      align: alignValue
    }
  }));
};
export default App;