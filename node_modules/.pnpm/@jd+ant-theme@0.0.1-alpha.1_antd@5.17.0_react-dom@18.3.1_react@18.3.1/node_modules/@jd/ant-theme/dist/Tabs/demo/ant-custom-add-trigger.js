function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { Button, Tabs } from "../..";
import React, { useRef, useState } from 'react';
var defaultPanes = new Array(2).fill(null).map(function (_, index) {
  var id = String(index + 1);
  return {
    label: "Tab ".concat(id),
    children: "Content of Tab Pane ".concat(index + 1),
    key: id
  };
});
var App = function App() {
  var _useState = useState(defaultPanes[0].key),
    _useState2 = _slicedToArray(_useState, 2),
    activeKey = _useState2[0],
    setActiveKey = _useState2[1];
  var _useState3 = useState(defaultPanes),
    _useState4 = _slicedToArray(_useState3, 2),
    items = _useState4[0],
    setItems = _useState4[1];
  var newTabIndex = useRef(0);
  var onChange = function onChange(key) {
    setActiveKey(key);
  };
  var add = function add() {
    var newActiveKey = "newTab".concat(newTabIndex.current++);
    setItems([].concat(_toConsumableArray(items), [{
      label: 'New Tab',
      children: 'New Tab Pane',
      key: newActiveKey
    }]));
    setActiveKey(newActiveKey);
  };
  var remove = function remove(targetKey) {
    var targetIndex = items.findIndex(function (pane) {
      return pane.key === targetKey;
    });
    var newPanes = items.filter(function (pane) {
      return pane.key !== targetKey;
    });
    if (newPanes.length && targetKey === activeKey) {
      var key = newPanes[targetIndex === newPanes.length ? targetIndex - 1 : targetIndex].key;
      setActiveKey(key);
    }
    setItems(newPanes);
  };
  var onEdit = function onEdit(targetKey, action) {
    if (action === 'add') {
      add();
    } else {
      remove(targetKey);
    }
  };
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    style: {
      marginBottom: 16
    }
  }, /*#__PURE__*/React.createElement(Button, {
    onClick: add
  }, "ADD")), /*#__PURE__*/React.createElement(Tabs, {
    hideAdd: true,
    onChange: onChange,
    activeKey: activeKey,
    type: "editable-card",
    onEdit: onEdit,
    items: items
  }));
};
export default App;