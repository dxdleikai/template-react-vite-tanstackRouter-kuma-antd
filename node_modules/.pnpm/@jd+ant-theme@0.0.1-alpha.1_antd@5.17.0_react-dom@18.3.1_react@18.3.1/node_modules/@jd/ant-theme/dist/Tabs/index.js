function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { getProps } from "../utils/PropsType";
import { ConfigProvider } from "./..";
import { Tabs as AntTabs } from 'antd';
import omit from 'lodash/omit';
import React, { forwardRef } from 'react';
/**
 * 继承ant Tabs，扩展了block 属性
 */
var InternalTabs = function InternalTabs(props, ref) {
  var _React$useContext = React.useContext(ConfigProvider.ConfigContext),
    getPrefixCls = _React$useContext.getPrefixCls;
  var prefixCls = getPrefixCls();
  var _props$block = props.block,
    block = _props$block === void 0 ? false : _props$block,
    _props$weak = props.weak,
    weak = _props$weak === void 0 ? false : _props$weak,
    type = props.type;
  var wrapperProps = getProps(props, {
    className: _defineProperty(_defineProperty(_defineProperty({}, "".concat(prefixCls, "-tabs-block"), block), "".concat(prefixCls, "-tabs-weak"), weak), "".concat(prefixCls, "-tabs-button"), type === 'button')
  }, ['block', 'weak']);
  return (
    /*#__PURE__*/
    // @ts-ignore
    React.createElement(AntTabs, _extends({}, wrapperProps, {
      ref: ref
    }), props.children)
  );
};

// 重写组件
var Tabs = /*#__PURE__*/forwardRef(InternalTabs);

// 合并内部方法
Object.assign(Tabs, omit(AntTabs, ['$$typeof', 'render']));
export default Tabs;