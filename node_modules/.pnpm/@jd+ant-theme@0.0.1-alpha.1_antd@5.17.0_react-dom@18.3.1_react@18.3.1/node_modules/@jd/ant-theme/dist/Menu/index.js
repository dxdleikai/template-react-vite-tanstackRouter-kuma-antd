function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import { getProps } from "../utils/PropsType";
import { Menu as AntMenu } from 'antd';
// import { ConfigProvider } from '@jd/ant-theme';
import omit from 'lodash/omit';
import React from 'react';
/**
 * 继承ant tag,在此之上做扩充以及默认属性更改
 */
var InternalMenu = function InternalMenu(props, ref) {
  // const { getPrefixCls } = React.useContext(ConfigProvider.ConfigContext);
  // const prefixCls = getPrefixCls();

  var wrapperProps = getProps(props, {
    styleStart: {
      userSelect: 'none'
    },
    inlineIndent: 12
    // : 20,
  }, []);
  return /*#__PURE__*/React.createElement(AntMenu, _extends({}, wrapperProps, {
    ref: ref
  }), props.children);
};
// 重写组件 TODO 需要处理错误
var Menu = /*#__PURE__*/React.forwardRef(InternalMenu);
// 合并内部方法
Object.assign(Menu, omit(AntMenu, ['$$typeof', 'render']));
export default Menu;