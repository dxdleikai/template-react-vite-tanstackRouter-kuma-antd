function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import _kebabCase from 'lodash/kebabCase';
import _merge from 'lodash/merge';
import { useEffect } from 'react';
import defaultToken from "./defaultToken";
export var CustomTheme = function CustomTheme(props) {
  var _props$root = props.root,
    root = _props$root === void 0 ? ':root' : _props$root,
    _props$prefix = props.prefix,
    prefix = _props$prefix === void 0 ? '' : _props$prefix,
    _props$token = props.token,
    token = _props$token === void 0 ? {} : _props$token,
    _props$useDefaultToke = props.useDefaultToken,
    useDefaultToken = _props$useDefaultToke === void 0 ? true : _props$useDefaultToke;
  useEffect(function () {
    var _document$querySelect;
    // 生成css var
    var obj = {};
    var resultToken = useDefaultToken ? _merge(defaultToken, token) : token;
    Object.keys(resultToken).forEach(function (e) {
      obj["".concat(prefix ? "--".concat(_kebabCase(prefix)) : '-', "-").concat(_kebabCase(e))] = resultToken[e];
    });
    var styleDom = document.createElement('style');
    styleDom.innerHTML = "\n      ".concat(root, "{\n        ").concat(Object.entries(obj).map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
        property = _ref2[0],
        value = _ref2[1];
      return "".concat(property, ":").concat(value, ";");
    }).join(' '), "\n      }\n    ");
    (_document$querySelect = document.querySelector('head')) === null || _document$querySelect === void 0 || _document$querySelect.appendChild(styleDom);
    return function () {
      styleDom.remove();
    };
  }, [token, prefix]);
  return props.children;
};
CustomTheme.defaultToken = defaultToken;
export default CustomTheme;