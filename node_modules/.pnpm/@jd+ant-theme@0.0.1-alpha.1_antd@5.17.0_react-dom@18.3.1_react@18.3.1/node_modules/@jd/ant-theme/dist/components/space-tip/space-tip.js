import { getProps } from "../../utils/PropsType";
import React from 'react';
/**
 * components demo
 */
var SpaceTip = function SpaceTip(props) {
  var left = props.left,
    top = props.top,
    bottom = props.bottom,
    right = props.right,
    _props$height = props.height,
    height = _props$height === void 0 ? 11 : _props$height,
    _props$color = props.color,
    color = _props$color === void 0 ? '#F63218' : _props$color;
  var wrapperProps = getProps(props, {
    className: 'flex items-center justify-center',
    styleStart: {
      position: 'relative'
    }
  }, ['left', 'top', 'bottom', 'right', 'leftTip', 'topTip', 'bottomTip', 'rightTip', 'height', 'color']);
  var obj = {
    left: {
      wrapper: {
        width: "".concat(left, "px"),
        height: "".concat(height, "px"),
        borderLeft: "1px solid ".concat(color),
        borderRight: "1px solid ".concat(color),
        left: 0
      },
      line: {
        height: '1px',
        width: '100%',
        background: "".concat(color)
      },
      font: {
        color: "".concat(color),
        bottom: '100%'
      },
      tip: {
        top: '100%',
        color: "".concat(color)
      }
    },
    right: {
      wrapper: {
        width: "".concat(right, "px"),
        height: "".concat(height, "px"),
        borderLeft: "1px solid ".concat(color),
        borderRight: "1px solid ".concat(color),
        right: 0
      },
      line: {
        height: '1px',
        width: '100%',
        background: "".concat(color)
      },
      font: {
        color: "".concat(color),
        bottom: '100%'
      },
      tip: {
        top: '100%',
        color: "".concat(color)
      }
    },
    top: {
      wrapper: {
        height: "".concat(top, "px"),
        width: "".concat(height, "px"),
        borderTop: "1px solid ".concat(color),
        borderBottom: "1px solid ".concat(color),
        top: 0
      },
      line: {
        width: '1px',
        height: '100%',
        background: "".concat(color)
      },
      font: {
        color: "".concat(color),
        left: '100%'
      },
      tip: {}
    },
    bottom: {
      wrapper: {
        height: "".concat(bottom, "px"),
        width: "".concat(height, "px"),
        borderTop: "1px solid ".concat(color),
        borderBottom: "1px solid ".concat(color),
        bottom: 0
      },
      line: {
        width: '1px',
        height: '100%',
        background: "".concat(color)
      },
      font: {
        color: "".concat(color),
        left: '100%'
      },
      tip: {}
    }
  };
  return /*#__PURE__*/React.createElement("div", wrapperProps, ['left', 'right', 'top', 'bottom'].map(function (item, index) {
    var _obj$item, _obj$item2, _obj$item3, _obj$item4;
    var current = props === null || props === void 0 ? void 0 : props[item];
    var currentTip = props === null || props === void 0 ? void 0 : props["".concat(item, "Tip")];
    if (!current) {
      return null;
    }
    return /*#__PURE__*/React.createElement("div", {
      key: index,
      className: "absolute z-100 flex items-center  flex-col justify-center"
      // @ts-ignore
      ,
      style: (obj === null || obj === void 0 || (_obj$item = obj[item]) === null || _obj$item === void 0 ? void 0 : _obj$item.wrapper) || {}
    }, /*#__PURE__*/React.createElement("span", {
      className: "absolute whitespace-nowrap text-11 flex gap-5"
      // @ts-ignore
      ,
      style: (obj === null || obj === void 0 || (_obj$item2 = obj[item]) === null || _obj$item2 === void 0 ? void 0 : _obj$item2.font) || {}
    }, current, ['top', 'bottom'].includes(item) ? /*#__PURE__*/React.createElement("span", {
      className: "text-12"
    }, currentTip) : null), ['left', 'right'].includes(item) ? /*#__PURE__*/React.createElement("span", {
      className: "absolute whitespace-nowrap text-12 mt-5"
      // @ts-ignore
      ,
      style: (obj === null || obj === void 0 || (_obj$item3 = obj[item]) === null || _obj$item3 === void 0 ? void 0 : _obj$item3.tip) || {}
    }, currentTip) : null, /*#__PURE__*/React.createElement("div", {
      // @ts-ignore
      style: (obj === null || obj === void 0 || (_obj$item4 = obj[item]) === null || _obj$item4 === void 0 ? void 0 : _obj$item4.line) || {}
    }));
  }), props.children);
};
SpaceTip.defaultProps = {};
export default SpaceTip;