function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import { getProps } from "../utils/PropsType";
import { ConfigProvider } from "./..";
import { Input as AntInput } from 'antd';
import classNames from 'classnames';
import omit from 'lodash/omit';
import React, { forwardRef } from 'react';
/**
 * 继承ant Input，扩展了size 属性
 * TODO count 间距以及textarea 位置
 * TODO 错误提示，需要和FORM组件一起做
 */
var InternalInput = function InternalInput(props, ref) {
  var _React$useContext = React.useContext(ConfigProvider.ConfigContext),
    getPrefixCls = _React$useContext.getPrefixCls;
  var prefixCls = getPrefixCls();
  var size = props.size;
  var wrapperProps = getProps(props, {
    className: classNames([size ? "".concat(prefixCls, "-input-").concat(size) : '']),
    styleStart: {
      // display: 'flex',
      // alignItems: 'center',
      // justifyContent: 'center',
    }
  }, []);
  return /*#__PURE__*/React.createElement(AntInput, _extends({}, wrapperProps, {
    ref: ref
  }), props.children);
};

// 重写组件
var Input = /*#__PURE__*/forwardRef(InternalInput);

// 合并内部方法
Object.assign(Input, omit(AntInput, ['$$typeof', 'render']));
export default Input;